// --- template _header.gotpl ---
// Code generated by Prisma Client Go. DO NOT EDIT.
//nolint
//go:build !codeanalysis
// +build !codeanalysis

package db

import (
	"context"
	"os"
	"testing"

	// no-op import for go modules
	_ "github.com/joho/godotenv"
	_ "github.com/shopspring/decimal"

	"github.com/steebchen/prisma-client-go/engine"
	"github.com/steebchen/prisma-client-go/engine/mock"
	"github.com/steebchen/prisma-client-go/runtime/builder"
	"github.com/steebchen/prisma-client-go/runtime/lifecycle"
	"github.com/steebchen/prisma-client-go/runtime/raw"
	"github.com/steebchen/prisma-client-go/runtime/transaction"
	"github.com/steebchen/prisma-client-go/runtime/types"
	rawmodels "github.com/steebchen/prisma-client-go/runtime/types/raw"
)

// ignore unused os import as it may not be needed depending on engine type
var _ = os.DevNull

// re-declare variables which are needed in Prisma Client Go but also should be exported
// in the generated client

type PrismaTransaction = transaction.Transaction

const RFC3339Milli = types.RFC3339Milli

type BatchResult = types.BatchResult

type Boolean = bool
type String = string
type Int = int
type Float = float64

type DateTime = types.DateTime
type JSON = types.JSON
type Bytes = types.Bytes
type BigInt = types.BigInt
type Decimal = types.Decimal

type RawString = rawmodels.String
type RawInt = rawmodels.Int
type RawFloat = rawmodels.Float
type RawBoolean = rawmodels.Boolean
type RawDateTime = rawmodels.DateTime
type RawJSON = rawmodels.JSON
type RawBytes = rawmodels.Bytes
type RawBigInt = rawmodels.BigInt
type RawDecimal = rawmodels.Decimal

// deprecated: use SortOrder
type Direction = SortOrder

const (
	// deprecated: use SortOrderAsc
	ASC Direction = "asc"
	// deprecated: use SortOrderDesc
	DESC Direction = "desc"
)

// --- template client.gotpl ---
const datasources = `[{"name":"db","provider":"mongodb","activeProvider":"mongodb","url":{"fromEnvVar":"DATABASE_URL","value":""},"config":null}]`

const schema = `datasource db {
  // could be postgresql or mysql
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator db {
  provider = "go run github.com/steebchen/prisma-client-go"
}
 

model User {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    name        String
    username    String   @unique 
    height      String?
    weight      String?
    age         String?
    bloodgroup  String?
    gender      String?
    records     Record[]
    address     String
    image       String
    authId      String
}


model Record {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    title       String
    date        String
    symptoms    String[]
    diagnosis   String[]
    treatment   String[]
    reports     String[]
    user        User     @relation(fields: [userId], references: [id])
    userId    String    @db.ObjectId
}`
const schemaDatasourceURL = ""
const schemaEnvVarName = "DATABASE_URL"

// hasBinaryTargets is true when binaryTargets are provided on generation time
var hasBinaryTargets = true

// NewClient creates a new Prisma Client Go client.
// The client is not connected to the Prisma engine yet.
//
// Example:
//
//	client := db.NewClient()
//	if err := client.Prisma.Connect(); err != nil {
//	  handle(err)
//	}
//
//	defer func() {
//	  if err := client.Prisma.Disconnect(); err != nil {
//	    panic(fmt.Errorf("could not disconnect: %w", err))
//	  }
//	}()
func NewClient(options ...func(config *PrismaConfig)) *PrismaClient {
	var config PrismaConfig
	for _, option := range options {
		option(&config)
	}

	c := newClient()

	// use the schema connection url if set
	url := config.datasourceURL
	if url == "" {
		url = schemaDatasourceURL
		if url == "" {
			// if not, use the schema env var name
			url = os.Getenv(schemaEnvVarName)
			if url == "" {
				//panic("no connection string found")
				println("WARNING: env var which was defined in the Prisma schema is not set" + schemaEnvVarName)
			}
		}
	}

	c.Engine = engine.NewQueryEngine(schema, hasBinaryTargets, datasources, url)

	c.Prisma.Lifecycle = &lifecycle.Lifecycle{Engine: c.Engine}

	return c
}

type PrismaConfig struct {
	datasourceURL string
}

func WithDatasourceURL(url string) func(*PrismaConfig) {
	return func(config *PrismaConfig) {
		config.datasourceURL = url
	}
}

func newMockClient(expectations *[]mock.Expectation) *PrismaClient {
	c := newClient()
	c.Engine = mock.New(expectations)
	c.Prisma.Lifecycle = &lifecycle.Lifecycle{Engine: c.Engine}

	return c
}

func newClient() *PrismaClient {
	c := &PrismaClient{}
	c.User = userActions{client: c}
	c.Record = recordActions{client: c}

	c.Prisma = &PrismaActions{
		Raw: &raw.Raw{Engine: c},
		TX:  &transaction.TX{Engine: c},
	}
	return c
}

type PrismaActions struct {
	*lifecycle.Lifecycle
	*raw.Raw
	*transaction.TX
}

// PrismaClient is the instance of the Prisma Client Go client.
type PrismaClient struct {
	// engine is an abstractions of what happens under the hood
	// the query engine can spawn and manage the binary and send requests to it,
	// while a mock engine would collect mocks to verify them later
	engine.Engine

	// prisma provides prisma-related methods as opposed to model methods, such as Connect, Disconnect or raw queries
	Prisma *PrismaActions

	// User provides access to CRUD methods.
	User userActions
	// Record provides access to CRUD methods.
	Record recordActions
}

// --- template enums.gotpl ---

type UserScalarFieldEnum string

const (
	UserScalarFieldEnumID         UserScalarFieldEnum = "id"
	UserScalarFieldEnumName       UserScalarFieldEnum = "name"
	UserScalarFieldEnumUsername   UserScalarFieldEnum = "username"
	UserScalarFieldEnumHeight     UserScalarFieldEnum = "height"
	UserScalarFieldEnumWeight     UserScalarFieldEnum = "weight"
	UserScalarFieldEnumAge        UserScalarFieldEnum = "age"
	UserScalarFieldEnumBloodgroup UserScalarFieldEnum = "bloodgroup"
	UserScalarFieldEnumGender     UserScalarFieldEnum = "gender"
	UserScalarFieldEnumAddress    UserScalarFieldEnum = "address"
	UserScalarFieldEnumImage      UserScalarFieldEnum = "image"
	UserScalarFieldEnumAuthID     UserScalarFieldEnum = "authId"
)

type RecordScalarFieldEnum string

const (
	RecordScalarFieldEnumID        RecordScalarFieldEnum = "id"
	RecordScalarFieldEnumTitle     RecordScalarFieldEnum = "title"
	RecordScalarFieldEnumDate      RecordScalarFieldEnum = "date"
	RecordScalarFieldEnumSymptoms  RecordScalarFieldEnum = "symptoms"
	RecordScalarFieldEnumDiagnosis RecordScalarFieldEnum = "diagnosis"
	RecordScalarFieldEnumTreatment RecordScalarFieldEnum = "treatment"
	RecordScalarFieldEnumReports   RecordScalarFieldEnum = "reports"
	RecordScalarFieldEnumUserID    RecordScalarFieldEnum = "userId"
)

type SortOrder string

const (
	SortOrderAsc  SortOrder = "asc"
	SortOrderDesc SortOrder = "desc"
)

type QueryMode string

const (
	QueryModeDefault     QueryMode = "default"
	QueryModeInsensitive QueryMode = "insensitive"
)

// --- template errors.gotpl ---
var ErrNotFound = types.ErrNotFound
var IsErrNotFound = types.IsErrNotFound

type ErrUniqueConstraint = types.ErrUniqueConstraint[prismaFields]

// IsErrUniqueConstraint returns on a unique constraint error or violation with error info
// Use as follows:
//
//	user, err := db.User.CreateOne(...).Exec(cxt)
//	if err != nil {
//		if info, err := db.IsErrUniqueConstraint(err); err != nil {
//			// Fields exists for Postgres and SQLite
//			log.Printf("unique constraint on the fields: %s", info.Fields)
//
//			// you can also compare it with generated field names:
//			if info.Fields[0] == db.User.Name.Field() {
//				// do something
//			}
//
//			// For MySQL, use the constraint key
//			log.Printf("unique constraint on the key: %s", info.Key)
//		}
//	}
func IsErrUniqueConstraint(err error) (*types.ErrUniqueConstraint[prismaFields], bool) {
	return types.CheckUniqueConstraint[prismaFields](err)
}

// --- template fields.gotpl ---
type prismaFields string

type userPrismaFields = prismaFields

const userFieldID userPrismaFields = "id"

const userFieldName userPrismaFields = "name"

const userFieldUsername userPrismaFields = "username"

const userFieldHeight userPrismaFields = "height"

const userFieldWeight userPrismaFields = "weight"

const userFieldAge userPrismaFields = "age"

const userFieldBloodgroup userPrismaFields = "bloodgroup"

const userFieldGender userPrismaFields = "gender"

const userFieldRecords userPrismaFields = "records"

const userFieldAddress userPrismaFields = "address"

const userFieldImage userPrismaFields = "image"

const userFieldAuthID userPrismaFields = "authId"

type recordPrismaFields = prismaFields

const recordFieldID recordPrismaFields = "id"

const recordFieldTitle recordPrismaFields = "title"

const recordFieldDate recordPrismaFields = "date"

const recordFieldSymptoms recordPrismaFields = "symptoms"

const recordFieldDiagnosis recordPrismaFields = "diagnosis"

const recordFieldTreatment recordPrismaFields = "treatment"

const recordFieldReports recordPrismaFields = "reports"

const recordFieldUser recordPrismaFields = "user"

const recordFieldUserID recordPrismaFields = "userId"

// --- template mock.gotpl ---
func NewMock() (*PrismaClient, *Mock, func(t *testing.T)) {
	expectations := new([]mock.Expectation)
	pc := newMockClient(expectations)
	m := &Mock{
		Mock: &mock.Mock{
			Expectations: expectations,
		},
	}

	m.User = userMock{
		mock: m,
	}

	m.Record = recordMock{
		mock: m,
	}

	return pc, m, m.Ensure
}

type Mock struct {
	*mock.Mock

	User userMock

	Record recordMock
}

type userMock struct {
	mock *Mock
}

type UserMockExpectParam interface {
	ExtractQuery() builder.Query
	userModel()
}

func (m *userMock) Expect(query UserMockExpectParam) *userMockExec {
	return &userMockExec{
		mock:  m.mock,
		query: query.ExtractQuery(),
	}
}

type userMockExec struct {
	mock  *Mock
	query builder.Query
}

func (m *userMockExec) Returns(v UserModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *userMockExec) ReturnsMany(v []UserModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *userMockExec) Errors(err error) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query:   m.query,
		WantErr: err,
	})
}

type recordMock struct {
	mock *Mock
}

type RecordMockExpectParam interface {
	ExtractQuery() builder.Query
	recordModel()
}

func (m *recordMock) Expect(query RecordMockExpectParam) *recordMockExec {
	return &recordMockExec{
		mock:  m.mock,
		query: query.ExtractQuery(),
	}
}

type recordMockExec struct {
	mock  *Mock
	query builder.Query
}

func (m *recordMockExec) Returns(v RecordModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *recordMockExec) ReturnsMany(v []RecordModel) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query: m.query,
		Want:  &v,
	})
}

func (m *recordMockExec) Errors(err error) {
	*m.mock.Expectations = append(*m.mock.Expectations, mock.Expectation{
		Query:   m.query,
		WantErr: err,
	})
}

// --- template models.gotpl ---

// UserModel represents the User model and is a wrapper for accessing fields and methods
type UserModel struct {
	InnerUser
	RelationsUser
}

// InnerUser holds the actual data
type InnerUser struct {
	ID         string  `json:"id"`
	Name       string  `json:"name"`
	Username   string  `json:"username"`
	Height     *string `json:"height,omitempty"`
	Weight     *string `json:"weight,omitempty"`
	Age        *string `json:"age,omitempty"`
	Bloodgroup *string `json:"bloodgroup,omitempty"`
	Gender     *string `json:"gender,omitempty"`
	Address    string  `json:"address"`
	Image      string  `json:"image"`
	AuthID     string  `json:"authId"`
}

// RawUserModel is a struct for User when used in raw queries
type RawUserModel struct {
	ID         RawString  `json:"id"`
	Name       RawString  `json:"name"`
	Username   RawString  `json:"username"`
	Height     *RawString `json:"height,omitempty"`
	Weight     *RawString `json:"weight,omitempty"`
	Age        *RawString `json:"age,omitempty"`
	Bloodgroup *RawString `json:"bloodgroup,omitempty"`
	Gender     *RawString `json:"gender,omitempty"`
	Address    RawString  `json:"address"`
	Image      RawString  `json:"image"`
	AuthID     RawString  `json:"authId"`
}

// RelationsUser holds the relation data separately
type RelationsUser struct {
	Records []RecordModel `json:"records,omitempty"`
}

func (r UserModel) Height() (value String, ok bool) {
	if r.InnerUser.Height == nil {
		return value, false
	}
	return *r.InnerUser.Height, true
}

func (r UserModel) Weight() (value String, ok bool) {
	if r.InnerUser.Weight == nil {
		return value, false
	}
	return *r.InnerUser.Weight, true
}

func (r UserModel) Age() (value String, ok bool) {
	if r.InnerUser.Age == nil {
		return value, false
	}
	return *r.InnerUser.Age, true
}

func (r UserModel) Bloodgroup() (value String, ok bool) {
	if r.InnerUser.Bloodgroup == nil {
		return value, false
	}
	return *r.InnerUser.Bloodgroup, true
}

func (r UserModel) Gender() (value String, ok bool) {
	if r.InnerUser.Gender == nil {
		return value, false
	}
	return *r.InnerUser.Gender, true
}

func (r UserModel) Records() (value []RecordModel) {
	if r.RelationsUser.Records == nil {
		panic("attempted to access records but did not fetch it using the .With() syntax")
	}
	return r.RelationsUser.Records
}

// RecordModel represents the Record model and is a wrapper for accessing fields and methods
type RecordModel struct {
	InnerRecord
	RelationsRecord
}

// InnerRecord holds the actual data
type InnerRecord struct {
	ID        string   `json:"id"`
	Title     string   `json:"title"`
	Date      string   `json:"date"`
	Symptoms  []string `json:"symptoms"`
	Diagnosis []string `json:"diagnosis"`
	Treatment []string `json:"treatment"`
	Reports   []string `json:"reports"`
	UserID    string   `json:"userId"`
}

// RawRecordModel is a struct for Record when used in raw queries
type RawRecordModel struct {
	ID        RawString   `json:"id"`
	Title     RawString   `json:"title"`
	Date      RawString   `json:"date"`
	Symptoms  []RawString `json:"symptoms"`
	Diagnosis []RawString `json:"diagnosis"`
	Treatment []RawString `json:"treatment"`
	Reports   []RawString `json:"reports"`
	UserID    RawString   `json:"userId"`
}

// RelationsRecord holds the relation data separately
type RelationsRecord struct {
	User *UserModel `json:"user,omitempty"`
}

func (r RecordModel) User() (value *UserModel) {
	if r.RelationsRecord.User == nil {
		panic("attempted to access user but did not fetch it using the .With() syntax")
	}
	return r.RelationsRecord.User
}

// --- template query.gotpl ---

// User acts as a namespaces to access query methods for the User model
var User = userQuery{}

// userQuery exposes query functions for the user model
type userQuery struct {

	// ID
	//
	// @required
	ID userQueryIDString

	// Name
	//
	// @required
	Name userQueryNameString

	// Username
	//
	// @required
	// @unique
	Username userQueryUsernameString

	// Height
	//
	// @optional
	Height userQueryHeightString

	// Weight
	//
	// @optional
	Weight userQueryWeightString

	// Age
	//
	// @optional
	Age userQueryAgeString

	// Bloodgroup
	//
	// @optional
	Bloodgroup userQueryBloodgroupString

	// Gender
	//
	// @optional
	Gender userQueryGenderString

	Records userQueryRecordsRelations

	// Address
	//
	// @required
	Address userQueryAddressString

	// Image
	//
	// @required
	Image userQueryImageString

	// AuthID
	//
	// @required
	AuthID userQueryAuthIDString
}

func (userQuery) Not(params ...UserWhereParam) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name:     "NOT",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (userQuery) Or(params ...UserWhereParam) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name:     "OR",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (userQuery) And(params ...UserWhereParam) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name:     "AND",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

// base struct
type userQueryIDString struct{}

// Set the required value of ID
func (r userQueryIDString) Set(value string) userSetParam {

	return userSetParam{
		data: builder.Field{
			Name:  "id",
			Value: value,
		},
	}

}

// Set the optional value of ID dynamically
func (r userQueryIDString) SetIfPresent(value *String) userSetParam {
	if value == nil {
		return userSetParam{}
	}

	return r.Set(*value)
}

func (r userQueryIDString) Equals(value string) userWithPrismaIDEqualsUniqueParam {

	return userWithPrismaIDEqualsUniqueParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDString) EqualsIfPresent(value *string) userWithPrismaIDEqualsUniqueParam {
	if value == nil {
		return userWithPrismaIDEqualsUniqueParam{}
	}
	return r.Equals(*value)
}

func (r userQueryIDString) Order(direction SortOrder) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name:  "id",
			Value: direction,
		},
	}
}

func (r userQueryIDString) Cursor(cursor string) userCursorParam {
	return userCursorParam{
		data: builder.Field{
			Name:  "id",
			Value: cursor,
		},
	}
}

func (r userQueryIDString) In(value []string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDString) InIfPresent(value []string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.In(value)
}

func (r userQueryIDString) NotIn(value []string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDString) NotInIfPresent(value []string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.NotIn(value)
}

func (r userQueryIDString) Lt(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDString) LtIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Lt(*value)
}

func (r userQueryIDString) Lte(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDString) LteIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Lte(*value)
}

func (r userQueryIDString) Gt(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDString) GtIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Gt(*value)
}

func (r userQueryIDString) Gte(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDString) GteIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Gte(*value)
}

func (r userQueryIDString) Contains(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDString) ContainsIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Contains(*value)
}

func (r userQueryIDString) StartsWith(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDString) StartsWithIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.StartsWith(*value)
}

func (r userQueryIDString) EndsWith(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDString) EndsWithIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.EndsWith(*value)
}

func (r userQueryIDString) Mode(value QueryMode) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDString) ModeIfPresent(value *QueryMode) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Mode(*value)
}

func (r userQueryIDString) Not(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryIDString) NotIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r userQueryIDString) HasPrefix(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r userQueryIDString) HasPrefixIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r userQueryIDString) HasSuffix(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r userQueryIDString) HasSuffixIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.HasSuffix(*value)
}

func (r userQueryIDString) Field() userPrismaFields {
	return userFieldID
}

// base struct
type userQueryNameString struct{}

// Set the required value of Name
func (r userQueryNameString) Set(value string) userWithPrismaNameSetParam {

	return userWithPrismaNameSetParam{
		data: builder.Field{
			Name:  "name",
			Value: value,
		},
	}

}

// Set the optional value of Name dynamically
func (r userQueryNameString) SetIfPresent(value *String) userWithPrismaNameSetParam {
	if value == nil {
		return userWithPrismaNameSetParam{}
	}

	return r.Set(*value)
}

func (r userQueryNameString) Equals(value string) userWithPrismaNameEqualsParam {

	return userWithPrismaNameEqualsParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryNameString) EqualsIfPresent(value *string) userWithPrismaNameEqualsParam {
	if value == nil {
		return userWithPrismaNameEqualsParam{}
	}
	return r.Equals(*value)
}

func (r userQueryNameString) Order(direction SortOrder) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name:  "name",
			Value: direction,
		},
	}
}

func (r userQueryNameString) Cursor(cursor string) userCursorParam {
	return userCursorParam{
		data: builder.Field{
			Name:  "name",
			Value: cursor,
		},
	}
}

func (r userQueryNameString) In(value []string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryNameString) InIfPresent(value []string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.In(value)
}

func (r userQueryNameString) NotIn(value []string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryNameString) NotInIfPresent(value []string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.NotIn(value)
}

func (r userQueryNameString) Lt(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryNameString) LtIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Lt(*value)
}

func (r userQueryNameString) Lte(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryNameString) LteIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Lte(*value)
}

func (r userQueryNameString) Gt(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryNameString) GtIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Gt(*value)
}

func (r userQueryNameString) Gte(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryNameString) GteIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Gte(*value)
}

func (r userQueryNameString) Contains(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryNameString) ContainsIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Contains(*value)
}

func (r userQueryNameString) StartsWith(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryNameString) StartsWithIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r userQueryNameString) EndsWith(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryNameString) EndsWithIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r userQueryNameString) Mode(value QueryMode) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryNameString) ModeIfPresent(value *QueryMode) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Mode(*value)
}

func (r userQueryNameString) Not(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryNameString) NotIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r userQueryNameString) HasPrefix(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r userQueryNameString) HasPrefixIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r userQueryNameString) HasSuffix(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "name",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r userQueryNameString) HasSuffixIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r userQueryNameString) Field() userPrismaFields {
	return userFieldName
}

// base struct
type userQueryUsernameString struct{}

// Set the required value of Username
func (r userQueryUsernameString) Set(value string) userWithPrismaUsernameSetParam {

	return userWithPrismaUsernameSetParam{
		data: builder.Field{
			Name:  "username",
			Value: value,
		},
	}

}

// Set the optional value of Username dynamically
func (r userQueryUsernameString) SetIfPresent(value *String) userWithPrismaUsernameSetParam {
	if value == nil {
		return userWithPrismaUsernameSetParam{}
	}

	return r.Set(*value)
}

func (r userQueryUsernameString) Equals(value string) userWithPrismaUsernameEqualsUniqueParam {

	return userWithPrismaUsernameEqualsUniqueParam{
		data: builder.Field{
			Name: "username",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUsernameString) EqualsIfPresent(value *string) userWithPrismaUsernameEqualsUniqueParam {
	if value == nil {
		return userWithPrismaUsernameEqualsUniqueParam{}
	}
	return r.Equals(*value)
}

func (r userQueryUsernameString) Order(direction SortOrder) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name:  "username",
			Value: direction,
		},
	}
}

func (r userQueryUsernameString) Cursor(cursor string) userCursorParam {
	return userCursorParam{
		data: builder.Field{
			Name:  "username",
			Value: cursor,
		},
	}
}

func (r userQueryUsernameString) In(value []string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "username",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUsernameString) InIfPresent(value []string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.In(value)
}

func (r userQueryUsernameString) NotIn(value []string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "username",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUsernameString) NotInIfPresent(value []string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.NotIn(value)
}

func (r userQueryUsernameString) Lt(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "username",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUsernameString) LtIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Lt(*value)
}

func (r userQueryUsernameString) Lte(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "username",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUsernameString) LteIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Lte(*value)
}

func (r userQueryUsernameString) Gt(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "username",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUsernameString) GtIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Gt(*value)
}

func (r userQueryUsernameString) Gte(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "username",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUsernameString) GteIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Gte(*value)
}

func (r userQueryUsernameString) Contains(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "username",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUsernameString) ContainsIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Contains(*value)
}

func (r userQueryUsernameString) StartsWith(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "username",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUsernameString) StartsWithIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.StartsWith(*value)
}

func (r userQueryUsernameString) EndsWith(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "username",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUsernameString) EndsWithIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.EndsWith(*value)
}

func (r userQueryUsernameString) Mode(value QueryMode) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "username",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUsernameString) ModeIfPresent(value *QueryMode) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Mode(*value)
}

func (r userQueryUsernameString) Not(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "username",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryUsernameString) NotIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r userQueryUsernameString) HasPrefix(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "username",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r userQueryUsernameString) HasPrefixIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r userQueryUsernameString) HasSuffix(value string) userParamUnique {
	return userParamUnique{
		data: builder.Field{
			Name: "username",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r userQueryUsernameString) HasSuffixIfPresent(value *string) userParamUnique {
	if value == nil {
		return userParamUnique{}
	}
	return r.HasSuffix(*value)
}

func (r userQueryUsernameString) Field() userPrismaFields {
	return userFieldUsername
}

// base struct
type userQueryHeightString struct{}

// Set the optional value of Height
func (r userQueryHeightString) Set(value string) userSetParam {

	return userSetParam{
		data: builder.Field{
			Name:  "height",
			Value: value,
		},
	}

}

// Set the optional value of Height dynamically
func (r userQueryHeightString) SetIfPresent(value *String) userSetParam {
	if value == nil {
		return userSetParam{}
	}

	return r.Set(*value)
}

// Set the optional value of Height dynamically
func (r userQueryHeightString) SetOptional(value *String) userSetParam {
	if value == nil {

		var v *string
		return userSetParam{
			data: builder.Field{
				Name:  "height",
				Value: v,
			},
		}
	}

	return r.Set(*value)
}

func (r userQueryHeightString) Equals(value string) userWithPrismaHeightEqualsParam {

	return userWithPrismaHeightEqualsParam{
		data: builder.Field{
			Name: "height",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryHeightString) EqualsIfPresent(value *string) userWithPrismaHeightEqualsParam {
	if value == nil {
		return userWithPrismaHeightEqualsParam{}
	}
	return r.Equals(*value)
}

func (r userQueryHeightString) EqualsOptional(value *String) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "height",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryHeightString) IsNull() userDefaultParam {
	var str *string = nil
	return userDefaultParam{
		data: builder.Field{
			Name: "height",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: str,
				},
			},
		},
	}
}

func (r userQueryHeightString) Order(direction SortOrder) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name:  "height",
			Value: direction,
		},
	}
}

func (r userQueryHeightString) Cursor(cursor string) userCursorParam {
	return userCursorParam{
		data: builder.Field{
			Name:  "height",
			Value: cursor,
		},
	}
}

func (r userQueryHeightString) In(value []string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "height",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryHeightString) InIfPresent(value []string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.In(value)
}

func (r userQueryHeightString) NotIn(value []string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "height",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryHeightString) NotInIfPresent(value []string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.NotIn(value)
}

func (r userQueryHeightString) Lt(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "height",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryHeightString) LtIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Lt(*value)
}

func (r userQueryHeightString) Lte(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "height",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryHeightString) LteIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Lte(*value)
}

func (r userQueryHeightString) Gt(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "height",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryHeightString) GtIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Gt(*value)
}

func (r userQueryHeightString) Gte(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "height",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryHeightString) GteIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Gte(*value)
}

func (r userQueryHeightString) Contains(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "height",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryHeightString) ContainsIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Contains(*value)
}

func (r userQueryHeightString) StartsWith(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "height",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryHeightString) StartsWithIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r userQueryHeightString) EndsWith(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "height",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryHeightString) EndsWithIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r userQueryHeightString) Mode(value QueryMode) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "height",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryHeightString) ModeIfPresent(value *QueryMode) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Mode(*value)
}

func (r userQueryHeightString) Not(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "height",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryHeightString) NotIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r userQueryHeightString) HasPrefix(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "height",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r userQueryHeightString) HasPrefixIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r userQueryHeightString) HasSuffix(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "height",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r userQueryHeightString) HasSuffixIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r userQueryHeightString) Field() userPrismaFields {
	return userFieldHeight
}

// base struct
type userQueryWeightString struct{}

// Set the optional value of Weight
func (r userQueryWeightString) Set(value string) userSetParam {

	return userSetParam{
		data: builder.Field{
			Name:  "weight",
			Value: value,
		},
	}

}

// Set the optional value of Weight dynamically
func (r userQueryWeightString) SetIfPresent(value *String) userSetParam {
	if value == nil {
		return userSetParam{}
	}

	return r.Set(*value)
}

// Set the optional value of Weight dynamically
func (r userQueryWeightString) SetOptional(value *String) userSetParam {
	if value == nil {

		var v *string
		return userSetParam{
			data: builder.Field{
				Name:  "weight",
				Value: v,
			},
		}
	}

	return r.Set(*value)
}

func (r userQueryWeightString) Equals(value string) userWithPrismaWeightEqualsParam {

	return userWithPrismaWeightEqualsParam{
		data: builder.Field{
			Name: "weight",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryWeightString) EqualsIfPresent(value *string) userWithPrismaWeightEqualsParam {
	if value == nil {
		return userWithPrismaWeightEqualsParam{}
	}
	return r.Equals(*value)
}

func (r userQueryWeightString) EqualsOptional(value *String) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "weight",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryWeightString) IsNull() userDefaultParam {
	var str *string = nil
	return userDefaultParam{
		data: builder.Field{
			Name: "weight",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: str,
				},
			},
		},
	}
}

func (r userQueryWeightString) Order(direction SortOrder) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name:  "weight",
			Value: direction,
		},
	}
}

func (r userQueryWeightString) Cursor(cursor string) userCursorParam {
	return userCursorParam{
		data: builder.Field{
			Name:  "weight",
			Value: cursor,
		},
	}
}

func (r userQueryWeightString) In(value []string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "weight",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryWeightString) InIfPresent(value []string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.In(value)
}

func (r userQueryWeightString) NotIn(value []string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "weight",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryWeightString) NotInIfPresent(value []string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.NotIn(value)
}

func (r userQueryWeightString) Lt(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "weight",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryWeightString) LtIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Lt(*value)
}

func (r userQueryWeightString) Lte(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "weight",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryWeightString) LteIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Lte(*value)
}

func (r userQueryWeightString) Gt(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "weight",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryWeightString) GtIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Gt(*value)
}

func (r userQueryWeightString) Gte(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "weight",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryWeightString) GteIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Gte(*value)
}

func (r userQueryWeightString) Contains(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "weight",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryWeightString) ContainsIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Contains(*value)
}

func (r userQueryWeightString) StartsWith(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "weight",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryWeightString) StartsWithIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r userQueryWeightString) EndsWith(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "weight",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryWeightString) EndsWithIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r userQueryWeightString) Mode(value QueryMode) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "weight",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryWeightString) ModeIfPresent(value *QueryMode) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Mode(*value)
}

func (r userQueryWeightString) Not(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "weight",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryWeightString) NotIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r userQueryWeightString) HasPrefix(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "weight",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r userQueryWeightString) HasPrefixIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r userQueryWeightString) HasSuffix(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "weight",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r userQueryWeightString) HasSuffixIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r userQueryWeightString) Field() userPrismaFields {
	return userFieldWeight
}

// base struct
type userQueryAgeString struct{}

// Set the optional value of Age
func (r userQueryAgeString) Set(value string) userSetParam {

	return userSetParam{
		data: builder.Field{
			Name:  "age",
			Value: value,
		},
	}

}

// Set the optional value of Age dynamically
func (r userQueryAgeString) SetIfPresent(value *String) userSetParam {
	if value == nil {
		return userSetParam{}
	}

	return r.Set(*value)
}

// Set the optional value of Age dynamically
func (r userQueryAgeString) SetOptional(value *String) userSetParam {
	if value == nil {

		var v *string
		return userSetParam{
			data: builder.Field{
				Name:  "age",
				Value: v,
			},
		}
	}

	return r.Set(*value)
}

func (r userQueryAgeString) Equals(value string) userWithPrismaAgeEqualsParam {

	return userWithPrismaAgeEqualsParam{
		data: builder.Field{
			Name: "age",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryAgeString) EqualsIfPresent(value *string) userWithPrismaAgeEqualsParam {
	if value == nil {
		return userWithPrismaAgeEqualsParam{}
	}
	return r.Equals(*value)
}

func (r userQueryAgeString) EqualsOptional(value *String) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "age",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryAgeString) IsNull() userDefaultParam {
	var str *string = nil
	return userDefaultParam{
		data: builder.Field{
			Name: "age",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: str,
				},
			},
		},
	}
}

func (r userQueryAgeString) Order(direction SortOrder) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name:  "age",
			Value: direction,
		},
	}
}

func (r userQueryAgeString) Cursor(cursor string) userCursorParam {
	return userCursorParam{
		data: builder.Field{
			Name:  "age",
			Value: cursor,
		},
	}
}

func (r userQueryAgeString) In(value []string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "age",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryAgeString) InIfPresent(value []string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.In(value)
}

func (r userQueryAgeString) NotIn(value []string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "age",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryAgeString) NotInIfPresent(value []string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.NotIn(value)
}

func (r userQueryAgeString) Lt(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "age",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryAgeString) LtIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Lt(*value)
}

func (r userQueryAgeString) Lte(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "age",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryAgeString) LteIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Lte(*value)
}

func (r userQueryAgeString) Gt(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "age",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryAgeString) GtIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Gt(*value)
}

func (r userQueryAgeString) Gte(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "age",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryAgeString) GteIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Gte(*value)
}

func (r userQueryAgeString) Contains(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "age",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryAgeString) ContainsIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Contains(*value)
}

func (r userQueryAgeString) StartsWith(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "age",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryAgeString) StartsWithIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r userQueryAgeString) EndsWith(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "age",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryAgeString) EndsWithIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r userQueryAgeString) Mode(value QueryMode) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "age",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryAgeString) ModeIfPresent(value *QueryMode) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Mode(*value)
}

func (r userQueryAgeString) Not(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "age",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryAgeString) NotIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r userQueryAgeString) HasPrefix(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "age",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r userQueryAgeString) HasPrefixIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r userQueryAgeString) HasSuffix(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "age",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r userQueryAgeString) HasSuffixIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r userQueryAgeString) Field() userPrismaFields {
	return userFieldAge
}

// base struct
type userQueryBloodgroupString struct{}

// Set the optional value of Bloodgroup
func (r userQueryBloodgroupString) Set(value string) userSetParam {

	return userSetParam{
		data: builder.Field{
			Name:  "bloodgroup",
			Value: value,
		},
	}

}

// Set the optional value of Bloodgroup dynamically
func (r userQueryBloodgroupString) SetIfPresent(value *String) userSetParam {
	if value == nil {
		return userSetParam{}
	}

	return r.Set(*value)
}

// Set the optional value of Bloodgroup dynamically
func (r userQueryBloodgroupString) SetOptional(value *String) userSetParam {
	if value == nil {

		var v *string
		return userSetParam{
			data: builder.Field{
				Name:  "bloodgroup",
				Value: v,
			},
		}
	}

	return r.Set(*value)
}

func (r userQueryBloodgroupString) Equals(value string) userWithPrismaBloodgroupEqualsParam {

	return userWithPrismaBloodgroupEqualsParam{
		data: builder.Field{
			Name: "bloodgroup",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryBloodgroupString) EqualsIfPresent(value *string) userWithPrismaBloodgroupEqualsParam {
	if value == nil {
		return userWithPrismaBloodgroupEqualsParam{}
	}
	return r.Equals(*value)
}

func (r userQueryBloodgroupString) EqualsOptional(value *String) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "bloodgroup",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryBloodgroupString) IsNull() userDefaultParam {
	var str *string = nil
	return userDefaultParam{
		data: builder.Field{
			Name: "bloodgroup",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: str,
				},
			},
		},
	}
}

func (r userQueryBloodgroupString) Order(direction SortOrder) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name:  "bloodgroup",
			Value: direction,
		},
	}
}

func (r userQueryBloodgroupString) Cursor(cursor string) userCursorParam {
	return userCursorParam{
		data: builder.Field{
			Name:  "bloodgroup",
			Value: cursor,
		},
	}
}

func (r userQueryBloodgroupString) In(value []string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "bloodgroup",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryBloodgroupString) InIfPresent(value []string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.In(value)
}

func (r userQueryBloodgroupString) NotIn(value []string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "bloodgroup",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryBloodgroupString) NotInIfPresent(value []string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.NotIn(value)
}

func (r userQueryBloodgroupString) Lt(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "bloodgroup",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryBloodgroupString) LtIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Lt(*value)
}

func (r userQueryBloodgroupString) Lte(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "bloodgroup",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryBloodgroupString) LteIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Lte(*value)
}

func (r userQueryBloodgroupString) Gt(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "bloodgroup",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryBloodgroupString) GtIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Gt(*value)
}

func (r userQueryBloodgroupString) Gte(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "bloodgroup",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryBloodgroupString) GteIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Gte(*value)
}

func (r userQueryBloodgroupString) Contains(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "bloodgroup",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryBloodgroupString) ContainsIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Contains(*value)
}

func (r userQueryBloodgroupString) StartsWith(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "bloodgroup",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryBloodgroupString) StartsWithIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r userQueryBloodgroupString) EndsWith(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "bloodgroup",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryBloodgroupString) EndsWithIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r userQueryBloodgroupString) Mode(value QueryMode) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "bloodgroup",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryBloodgroupString) ModeIfPresent(value *QueryMode) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Mode(*value)
}

func (r userQueryBloodgroupString) Not(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "bloodgroup",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryBloodgroupString) NotIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r userQueryBloodgroupString) HasPrefix(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "bloodgroup",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r userQueryBloodgroupString) HasPrefixIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r userQueryBloodgroupString) HasSuffix(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "bloodgroup",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r userQueryBloodgroupString) HasSuffixIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r userQueryBloodgroupString) Field() userPrismaFields {
	return userFieldBloodgroup
}

// base struct
type userQueryGenderString struct{}

// Set the optional value of Gender
func (r userQueryGenderString) Set(value string) userSetParam {

	return userSetParam{
		data: builder.Field{
			Name:  "gender",
			Value: value,
		},
	}

}

// Set the optional value of Gender dynamically
func (r userQueryGenderString) SetIfPresent(value *String) userSetParam {
	if value == nil {
		return userSetParam{}
	}

	return r.Set(*value)
}

// Set the optional value of Gender dynamically
func (r userQueryGenderString) SetOptional(value *String) userSetParam {
	if value == nil {

		var v *string
		return userSetParam{
			data: builder.Field{
				Name:  "gender",
				Value: v,
			},
		}
	}

	return r.Set(*value)
}

func (r userQueryGenderString) Equals(value string) userWithPrismaGenderEqualsParam {

	return userWithPrismaGenderEqualsParam{
		data: builder.Field{
			Name: "gender",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryGenderString) EqualsIfPresent(value *string) userWithPrismaGenderEqualsParam {
	if value == nil {
		return userWithPrismaGenderEqualsParam{}
	}
	return r.Equals(*value)
}

func (r userQueryGenderString) EqualsOptional(value *String) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "gender",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryGenderString) IsNull() userDefaultParam {
	var str *string = nil
	return userDefaultParam{
		data: builder.Field{
			Name: "gender",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: str,
				},
			},
		},
	}
}

func (r userQueryGenderString) Order(direction SortOrder) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name:  "gender",
			Value: direction,
		},
	}
}

func (r userQueryGenderString) Cursor(cursor string) userCursorParam {
	return userCursorParam{
		data: builder.Field{
			Name:  "gender",
			Value: cursor,
		},
	}
}

func (r userQueryGenderString) In(value []string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "gender",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryGenderString) InIfPresent(value []string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.In(value)
}

func (r userQueryGenderString) NotIn(value []string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "gender",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryGenderString) NotInIfPresent(value []string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.NotIn(value)
}

func (r userQueryGenderString) Lt(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "gender",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryGenderString) LtIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Lt(*value)
}

func (r userQueryGenderString) Lte(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "gender",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryGenderString) LteIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Lte(*value)
}

func (r userQueryGenderString) Gt(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "gender",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryGenderString) GtIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Gt(*value)
}

func (r userQueryGenderString) Gte(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "gender",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryGenderString) GteIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Gte(*value)
}

func (r userQueryGenderString) Contains(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "gender",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryGenderString) ContainsIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Contains(*value)
}

func (r userQueryGenderString) StartsWith(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "gender",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryGenderString) StartsWithIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r userQueryGenderString) EndsWith(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "gender",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryGenderString) EndsWithIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r userQueryGenderString) Mode(value QueryMode) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "gender",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryGenderString) ModeIfPresent(value *QueryMode) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Mode(*value)
}

func (r userQueryGenderString) Not(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "gender",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryGenderString) NotIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r userQueryGenderString) HasPrefix(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "gender",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r userQueryGenderString) HasPrefixIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r userQueryGenderString) HasSuffix(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "gender",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r userQueryGenderString) HasSuffixIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r userQueryGenderString) Field() userPrismaFields {
	return userFieldGender
}

// base struct
type userQueryRecordsRecord struct{}

type userQueryRecordsRelations struct{}

// User -> Records
//
// @relation
// @required
func (userQueryRecordsRelations) Some(
	params ...RecordWhereParam,
) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name: "records",
			Fields: []builder.Field{
				{
					Name:   "some",
					Fields: fields,
				},
			},
		},
	}
}

// User -> Records
//
// @relation
// @required
func (userQueryRecordsRelations) Every(
	params ...RecordWhereParam,
) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name: "records",
			Fields: []builder.Field{
				{
					Name:   "every",
					Fields: fields,
				},
			},
		},
	}
}

// User -> Records
//
// @relation
// @required
func (userQueryRecordsRelations) None(
	params ...RecordWhereParam,
) userDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userDefaultParam{
		data: builder.Field{
			Name: "records",
			Fields: []builder.Field{
				{
					Name:   "none",
					Fields: fields,
				},
			},
		},
	}
}

func (userQueryRecordsRelations) Fetch(

	params ...RecordWhereParam,

) userToRecordsFindMany {
	var v userToRecordsFindMany

	v.query.Operation = "query"
	v.query.Method = "records"
	v.query.Outputs = recordOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r userQueryRecordsRelations) Link(
	params ...RecordWhereParam,
) userSetParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return userSetParam{
		data: builder.Field{
			Name: "records",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: builder.TransformEquals(fields),

					List:     true,
					WrapList: true,
				},
			},
		},
	}
}

func (r userQueryRecordsRelations) Unlink(
	params ...RecordWhereParam,
) userSetParam {
	var v userSetParam

	var fields []builder.Field
	for _, q := range params {
		fields = append(fields, q.field())
	}
	v = userSetParam{
		data: builder.Field{
			Name: "records",
			Fields: []builder.Field{
				{
					Name:     "disconnect",
					List:     true,
					WrapList: true,
					Fields:   builder.TransformEquals(fields),
				},
			},
		},
	}

	return v
}

func (r userQueryRecordsRecord) Field() userPrismaFields {
	return userFieldRecords
}

// base struct
type userQueryAddressString struct{}

// Set the required value of Address
func (r userQueryAddressString) Set(value string) userWithPrismaAddressSetParam {

	return userWithPrismaAddressSetParam{
		data: builder.Field{
			Name:  "address",
			Value: value,
		},
	}

}

// Set the optional value of Address dynamically
func (r userQueryAddressString) SetIfPresent(value *String) userWithPrismaAddressSetParam {
	if value == nil {
		return userWithPrismaAddressSetParam{}
	}

	return r.Set(*value)
}

func (r userQueryAddressString) Equals(value string) userWithPrismaAddressEqualsParam {

	return userWithPrismaAddressEqualsParam{
		data: builder.Field{
			Name: "address",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryAddressString) EqualsIfPresent(value *string) userWithPrismaAddressEqualsParam {
	if value == nil {
		return userWithPrismaAddressEqualsParam{}
	}
	return r.Equals(*value)
}

func (r userQueryAddressString) Order(direction SortOrder) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name:  "address",
			Value: direction,
		},
	}
}

func (r userQueryAddressString) Cursor(cursor string) userCursorParam {
	return userCursorParam{
		data: builder.Field{
			Name:  "address",
			Value: cursor,
		},
	}
}

func (r userQueryAddressString) In(value []string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "address",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryAddressString) InIfPresent(value []string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.In(value)
}

func (r userQueryAddressString) NotIn(value []string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "address",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryAddressString) NotInIfPresent(value []string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.NotIn(value)
}

func (r userQueryAddressString) Lt(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "address",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryAddressString) LtIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Lt(*value)
}

func (r userQueryAddressString) Lte(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "address",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryAddressString) LteIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Lte(*value)
}

func (r userQueryAddressString) Gt(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "address",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryAddressString) GtIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Gt(*value)
}

func (r userQueryAddressString) Gte(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "address",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryAddressString) GteIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Gte(*value)
}

func (r userQueryAddressString) Contains(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "address",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryAddressString) ContainsIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Contains(*value)
}

func (r userQueryAddressString) StartsWith(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "address",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryAddressString) StartsWithIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r userQueryAddressString) EndsWith(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "address",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryAddressString) EndsWithIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r userQueryAddressString) Mode(value QueryMode) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "address",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryAddressString) ModeIfPresent(value *QueryMode) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Mode(*value)
}

func (r userQueryAddressString) Not(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "address",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryAddressString) NotIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r userQueryAddressString) HasPrefix(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "address",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r userQueryAddressString) HasPrefixIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r userQueryAddressString) HasSuffix(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "address",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r userQueryAddressString) HasSuffixIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r userQueryAddressString) Field() userPrismaFields {
	return userFieldAddress
}

// base struct
type userQueryImageString struct{}

// Set the required value of Image
func (r userQueryImageString) Set(value string) userWithPrismaImageSetParam {

	return userWithPrismaImageSetParam{
		data: builder.Field{
			Name:  "image",
			Value: value,
		},
	}

}

// Set the optional value of Image dynamically
func (r userQueryImageString) SetIfPresent(value *String) userWithPrismaImageSetParam {
	if value == nil {
		return userWithPrismaImageSetParam{}
	}

	return r.Set(*value)
}

func (r userQueryImageString) Equals(value string) userWithPrismaImageEqualsParam {

	return userWithPrismaImageEqualsParam{
		data: builder.Field{
			Name: "image",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryImageString) EqualsIfPresent(value *string) userWithPrismaImageEqualsParam {
	if value == nil {
		return userWithPrismaImageEqualsParam{}
	}
	return r.Equals(*value)
}

func (r userQueryImageString) Order(direction SortOrder) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name:  "image",
			Value: direction,
		},
	}
}

func (r userQueryImageString) Cursor(cursor string) userCursorParam {
	return userCursorParam{
		data: builder.Field{
			Name:  "image",
			Value: cursor,
		},
	}
}

func (r userQueryImageString) In(value []string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "image",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryImageString) InIfPresent(value []string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.In(value)
}

func (r userQueryImageString) NotIn(value []string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "image",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryImageString) NotInIfPresent(value []string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.NotIn(value)
}

func (r userQueryImageString) Lt(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "image",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryImageString) LtIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Lt(*value)
}

func (r userQueryImageString) Lte(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "image",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryImageString) LteIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Lte(*value)
}

func (r userQueryImageString) Gt(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "image",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryImageString) GtIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Gt(*value)
}

func (r userQueryImageString) Gte(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "image",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryImageString) GteIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Gte(*value)
}

func (r userQueryImageString) Contains(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "image",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryImageString) ContainsIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Contains(*value)
}

func (r userQueryImageString) StartsWith(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "image",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryImageString) StartsWithIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r userQueryImageString) EndsWith(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "image",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryImageString) EndsWithIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r userQueryImageString) Mode(value QueryMode) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "image",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryImageString) ModeIfPresent(value *QueryMode) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Mode(*value)
}

func (r userQueryImageString) Not(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "image",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryImageString) NotIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r userQueryImageString) HasPrefix(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "image",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r userQueryImageString) HasPrefixIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r userQueryImageString) HasSuffix(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "image",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r userQueryImageString) HasSuffixIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r userQueryImageString) Field() userPrismaFields {
	return userFieldImage
}

// base struct
type userQueryAuthIDString struct{}

// Set the required value of AuthID
func (r userQueryAuthIDString) Set(value string) userWithPrismaAuthIDSetParam {

	return userWithPrismaAuthIDSetParam{
		data: builder.Field{
			Name:  "authId",
			Value: value,
		},
	}

}

// Set the optional value of AuthID dynamically
func (r userQueryAuthIDString) SetIfPresent(value *String) userWithPrismaAuthIDSetParam {
	if value == nil {
		return userWithPrismaAuthIDSetParam{}
	}

	return r.Set(*value)
}

func (r userQueryAuthIDString) Equals(value string) userWithPrismaAuthIDEqualsParam {

	return userWithPrismaAuthIDEqualsParam{
		data: builder.Field{
			Name: "authId",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryAuthIDString) EqualsIfPresent(value *string) userWithPrismaAuthIDEqualsParam {
	if value == nil {
		return userWithPrismaAuthIDEqualsParam{}
	}
	return r.Equals(*value)
}

func (r userQueryAuthIDString) Order(direction SortOrder) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name:  "authId",
			Value: direction,
		},
	}
}

func (r userQueryAuthIDString) Cursor(cursor string) userCursorParam {
	return userCursorParam{
		data: builder.Field{
			Name:  "authId",
			Value: cursor,
		},
	}
}

func (r userQueryAuthIDString) In(value []string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "authId",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryAuthIDString) InIfPresent(value []string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.In(value)
}

func (r userQueryAuthIDString) NotIn(value []string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "authId",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryAuthIDString) NotInIfPresent(value []string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.NotIn(value)
}

func (r userQueryAuthIDString) Lt(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "authId",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryAuthIDString) LtIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Lt(*value)
}

func (r userQueryAuthIDString) Lte(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "authId",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryAuthIDString) LteIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Lte(*value)
}

func (r userQueryAuthIDString) Gt(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "authId",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryAuthIDString) GtIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Gt(*value)
}

func (r userQueryAuthIDString) Gte(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "authId",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryAuthIDString) GteIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Gte(*value)
}

func (r userQueryAuthIDString) Contains(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "authId",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryAuthIDString) ContainsIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Contains(*value)
}

func (r userQueryAuthIDString) StartsWith(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "authId",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryAuthIDString) StartsWithIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r userQueryAuthIDString) EndsWith(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "authId",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryAuthIDString) EndsWithIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r userQueryAuthIDString) Mode(value QueryMode) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "authId",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryAuthIDString) ModeIfPresent(value *QueryMode) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Mode(*value)
}

func (r userQueryAuthIDString) Not(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "authId",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r userQueryAuthIDString) NotIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r userQueryAuthIDString) HasPrefix(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "authId",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r userQueryAuthIDString) HasPrefixIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r userQueryAuthIDString) HasSuffix(value string) userDefaultParam {
	return userDefaultParam{
		data: builder.Field{
			Name: "authId",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r userQueryAuthIDString) HasSuffixIfPresent(value *string) userDefaultParam {
	if value == nil {
		return userDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r userQueryAuthIDString) Field() userPrismaFields {
	return userFieldAuthID
}

// Record acts as a namespaces to access query methods for the Record model
var Record = recordQuery{}

// recordQuery exposes query functions for the record model
type recordQuery struct {

	// ID
	//
	// @required
	ID recordQueryIDString

	// Title
	//
	// @required
	Title recordQueryTitleString

	// Date
	//
	// @required
	Date recordQueryDateString

	// Symptoms
	//
	// @required
	Symptoms recordQuerySymptomsString

	// Diagnosis
	//
	// @required
	Diagnosis recordQueryDiagnosisString

	// Treatment
	//
	// @required
	Treatment recordQueryTreatmentString

	// Reports
	//
	// @required
	Reports recordQueryReportsString

	User recordQueryUserRelations

	// UserID
	//
	// @required
	UserID recordQueryUserIDString
}

func (recordQuery) Not(params ...RecordWhereParam) recordDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return recordDefaultParam{
		data: builder.Field{
			Name:     "NOT",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (recordQuery) Or(params ...RecordWhereParam) recordDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return recordDefaultParam{
		data: builder.Field{
			Name:     "OR",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

func (recordQuery) And(params ...RecordWhereParam) recordDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return recordDefaultParam{
		data: builder.Field{
			Name:     "AND",
			List:     true,
			WrapList: true,
			Fields:   fields,
		},
	}
}

// base struct
type recordQueryIDString struct{}

// Set the required value of ID
func (r recordQueryIDString) Set(value string) recordSetParam {

	return recordSetParam{
		data: builder.Field{
			Name:  "id",
			Value: value,
		},
	}

}

// Set the optional value of ID dynamically
func (r recordQueryIDString) SetIfPresent(value *String) recordSetParam {
	if value == nil {
		return recordSetParam{}
	}

	return r.Set(*value)
}

func (r recordQueryIDString) Equals(value string) recordWithPrismaIDEqualsUniqueParam {

	return recordWithPrismaIDEqualsUniqueParam{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r recordQueryIDString) EqualsIfPresent(value *string) recordWithPrismaIDEqualsUniqueParam {
	if value == nil {
		return recordWithPrismaIDEqualsUniqueParam{}
	}
	return r.Equals(*value)
}

func (r recordQueryIDString) Order(direction SortOrder) recordDefaultParam {
	return recordDefaultParam{
		data: builder.Field{
			Name:  "id",
			Value: direction,
		},
	}
}

func (r recordQueryIDString) Cursor(cursor string) recordCursorParam {
	return recordCursorParam{
		data: builder.Field{
			Name:  "id",
			Value: cursor,
		},
	}
}

func (r recordQueryIDString) In(value []string) recordParamUnique {
	return recordParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r recordQueryIDString) InIfPresent(value []string) recordParamUnique {
	if value == nil {
		return recordParamUnique{}
	}
	return r.In(value)
}

func (r recordQueryIDString) NotIn(value []string) recordParamUnique {
	return recordParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r recordQueryIDString) NotInIfPresent(value []string) recordParamUnique {
	if value == nil {
		return recordParamUnique{}
	}
	return r.NotIn(value)
}

func (r recordQueryIDString) Lt(value string) recordParamUnique {
	return recordParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r recordQueryIDString) LtIfPresent(value *string) recordParamUnique {
	if value == nil {
		return recordParamUnique{}
	}
	return r.Lt(*value)
}

func (r recordQueryIDString) Lte(value string) recordParamUnique {
	return recordParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r recordQueryIDString) LteIfPresent(value *string) recordParamUnique {
	if value == nil {
		return recordParamUnique{}
	}
	return r.Lte(*value)
}

func (r recordQueryIDString) Gt(value string) recordParamUnique {
	return recordParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r recordQueryIDString) GtIfPresent(value *string) recordParamUnique {
	if value == nil {
		return recordParamUnique{}
	}
	return r.Gt(*value)
}

func (r recordQueryIDString) Gte(value string) recordParamUnique {
	return recordParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r recordQueryIDString) GteIfPresent(value *string) recordParamUnique {
	if value == nil {
		return recordParamUnique{}
	}
	return r.Gte(*value)
}

func (r recordQueryIDString) Contains(value string) recordParamUnique {
	return recordParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r recordQueryIDString) ContainsIfPresent(value *string) recordParamUnique {
	if value == nil {
		return recordParamUnique{}
	}
	return r.Contains(*value)
}

func (r recordQueryIDString) StartsWith(value string) recordParamUnique {
	return recordParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r recordQueryIDString) StartsWithIfPresent(value *string) recordParamUnique {
	if value == nil {
		return recordParamUnique{}
	}
	return r.StartsWith(*value)
}

func (r recordQueryIDString) EndsWith(value string) recordParamUnique {
	return recordParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r recordQueryIDString) EndsWithIfPresent(value *string) recordParamUnique {
	if value == nil {
		return recordParamUnique{}
	}
	return r.EndsWith(*value)
}

func (r recordQueryIDString) Mode(value QueryMode) recordParamUnique {
	return recordParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r recordQueryIDString) ModeIfPresent(value *QueryMode) recordParamUnique {
	if value == nil {
		return recordParamUnique{}
	}
	return r.Mode(*value)
}

func (r recordQueryIDString) Not(value string) recordParamUnique {
	return recordParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r recordQueryIDString) NotIfPresent(value *string) recordParamUnique {
	if value == nil {
		return recordParamUnique{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r recordQueryIDString) HasPrefix(value string) recordParamUnique {
	return recordParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r recordQueryIDString) HasPrefixIfPresent(value *string) recordParamUnique {
	if value == nil {
		return recordParamUnique{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r recordQueryIDString) HasSuffix(value string) recordParamUnique {
	return recordParamUnique{
		data: builder.Field{
			Name: "id",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r recordQueryIDString) HasSuffixIfPresent(value *string) recordParamUnique {
	if value == nil {
		return recordParamUnique{}
	}
	return r.HasSuffix(*value)
}

func (r recordQueryIDString) Field() recordPrismaFields {
	return recordFieldID
}

// base struct
type recordQueryTitleString struct{}

// Set the required value of Title
func (r recordQueryTitleString) Set(value string) recordWithPrismaTitleSetParam {

	return recordWithPrismaTitleSetParam{
		data: builder.Field{
			Name:  "title",
			Value: value,
		},
	}

}

// Set the optional value of Title dynamically
func (r recordQueryTitleString) SetIfPresent(value *String) recordWithPrismaTitleSetParam {
	if value == nil {
		return recordWithPrismaTitleSetParam{}
	}

	return r.Set(*value)
}

func (r recordQueryTitleString) Equals(value string) recordWithPrismaTitleEqualsParam {

	return recordWithPrismaTitleEqualsParam{
		data: builder.Field{
			Name: "title",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r recordQueryTitleString) EqualsIfPresent(value *string) recordWithPrismaTitleEqualsParam {
	if value == nil {
		return recordWithPrismaTitleEqualsParam{}
	}
	return r.Equals(*value)
}

func (r recordQueryTitleString) Order(direction SortOrder) recordDefaultParam {
	return recordDefaultParam{
		data: builder.Field{
			Name:  "title",
			Value: direction,
		},
	}
}

func (r recordQueryTitleString) Cursor(cursor string) recordCursorParam {
	return recordCursorParam{
		data: builder.Field{
			Name:  "title",
			Value: cursor,
		},
	}
}

func (r recordQueryTitleString) In(value []string) recordDefaultParam {
	return recordDefaultParam{
		data: builder.Field{
			Name: "title",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r recordQueryTitleString) InIfPresent(value []string) recordDefaultParam {
	if value == nil {
		return recordDefaultParam{}
	}
	return r.In(value)
}

func (r recordQueryTitleString) NotIn(value []string) recordDefaultParam {
	return recordDefaultParam{
		data: builder.Field{
			Name: "title",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r recordQueryTitleString) NotInIfPresent(value []string) recordDefaultParam {
	if value == nil {
		return recordDefaultParam{}
	}
	return r.NotIn(value)
}

func (r recordQueryTitleString) Lt(value string) recordDefaultParam {
	return recordDefaultParam{
		data: builder.Field{
			Name: "title",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r recordQueryTitleString) LtIfPresent(value *string) recordDefaultParam {
	if value == nil {
		return recordDefaultParam{}
	}
	return r.Lt(*value)
}

func (r recordQueryTitleString) Lte(value string) recordDefaultParam {
	return recordDefaultParam{
		data: builder.Field{
			Name: "title",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r recordQueryTitleString) LteIfPresent(value *string) recordDefaultParam {
	if value == nil {
		return recordDefaultParam{}
	}
	return r.Lte(*value)
}

func (r recordQueryTitleString) Gt(value string) recordDefaultParam {
	return recordDefaultParam{
		data: builder.Field{
			Name: "title",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r recordQueryTitleString) GtIfPresent(value *string) recordDefaultParam {
	if value == nil {
		return recordDefaultParam{}
	}
	return r.Gt(*value)
}

func (r recordQueryTitleString) Gte(value string) recordDefaultParam {
	return recordDefaultParam{
		data: builder.Field{
			Name: "title",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r recordQueryTitleString) GteIfPresent(value *string) recordDefaultParam {
	if value == nil {
		return recordDefaultParam{}
	}
	return r.Gte(*value)
}

func (r recordQueryTitleString) Contains(value string) recordDefaultParam {
	return recordDefaultParam{
		data: builder.Field{
			Name: "title",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r recordQueryTitleString) ContainsIfPresent(value *string) recordDefaultParam {
	if value == nil {
		return recordDefaultParam{}
	}
	return r.Contains(*value)
}

func (r recordQueryTitleString) StartsWith(value string) recordDefaultParam {
	return recordDefaultParam{
		data: builder.Field{
			Name: "title",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r recordQueryTitleString) StartsWithIfPresent(value *string) recordDefaultParam {
	if value == nil {
		return recordDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r recordQueryTitleString) EndsWith(value string) recordDefaultParam {
	return recordDefaultParam{
		data: builder.Field{
			Name: "title",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r recordQueryTitleString) EndsWithIfPresent(value *string) recordDefaultParam {
	if value == nil {
		return recordDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r recordQueryTitleString) Mode(value QueryMode) recordDefaultParam {
	return recordDefaultParam{
		data: builder.Field{
			Name: "title",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r recordQueryTitleString) ModeIfPresent(value *QueryMode) recordDefaultParam {
	if value == nil {
		return recordDefaultParam{}
	}
	return r.Mode(*value)
}

func (r recordQueryTitleString) Not(value string) recordDefaultParam {
	return recordDefaultParam{
		data: builder.Field{
			Name: "title",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r recordQueryTitleString) NotIfPresent(value *string) recordDefaultParam {
	if value == nil {
		return recordDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r recordQueryTitleString) HasPrefix(value string) recordDefaultParam {
	return recordDefaultParam{
		data: builder.Field{
			Name: "title",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r recordQueryTitleString) HasPrefixIfPresent(value *string) recordDefaultParam {
	if value == nil {
		return recordDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r recordQueryTitleString) HasSuffix(value string) recordDefaultParam {
	return recordDefaultParam{
		data: builder.Field{
			Name: "title",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r recordQueryTitleString) HasSuffixIfPresent(value *string) recordDefaultParam {
	if value == nil {
		return recordDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r recordQueryTitleString) Field() recordPrismaFields {
	return recordFieldTitle
}

// base struct
type recordQueryDateString struct{}

// Set the required value of Date
func (r recordQueryDateString) Set(value string) recordWithPrismaDateSetParam {

	return recordWithPrismaDateSetParam{
		data: builder.Field{
			Name:  "date",
			Value: value,
		},
	}

}

// Set the optional value of Date dynamically
func (r recordQueryDateString) SetIfPresent(value *String) recordWithPrismaDateSetParam {
	if value == nil {
		return recordWithPrismaDateSetParam{}
	}

	return r.Set(*value)
}

func (r recordQueryDateString) Equals(value string) recordWithPrismaDateEqualsParam {

	return recordWithPrismaDateEqualsParam{
		data: builder.Field{
			Name: "date",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r recordQueryDateString) EqualsIfPresent(value *string) recordWithPrismaDateEqualsParam {
	if value == nil {
		return recordWithPrismaDateEqualsParam{}
	}
	return r.Equals(*value)
}

func (r recordQueryDateString) Order(direction SortOrder) recordDefaultParam {
	return recordDefaultParam{
		data: builder.Field{
			Name:  "date",
			Value: direction,
		},
	}
}

func (r recordQueryDateString) Cursor(cursor string) recordCursorParam {
	return recordCursorParam{
		data: builder.Field{
			Name:  "date",
			Value: cursor,
		},
	}
}

func (r recordQueryDateString) In(value []string) recordDefaultParam {
	return recordDefaultParam{
		data: builder.Field{
			Name: "date",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r recordQueryDateString) InIfPresent(value []string) recordDefaultParam {
	if value == nil {
		return recordDefaultParam{}
	}
	return r.In(value)
}

func (r recordQueryDateString) NotIn(value []string) recordDefaultParam {
	return recordDefaultParam{
		data: builder.Field{
			Name: "date",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r recordQueryDateString) NotInIfPresent(value []string) recordDefaultParam {
	if value == nil {
		return recordDefaultParam{}
	}
	return r.NotIn(value)
}

func (r recordQueryDateString) Lt(value string) recordDefaultParam {
	return recordDefaultParam{
		data: builder.Field{
			Name: "date",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r recordQueryDateString) LtIfPresent(value *string) recordDefaultParam {
	if value == nil {
		return recordDefaultParam{}
	}
	return r.Lt(*value)
}

func (r recordQueryDateString) Lte(value string) recordDefaultParam {
	return recordDefaultParam{
		data: builder.Field{
			Name: "date",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r recordQueryDateString) LteIfPresent(value *string) recordDefaultParam {
	if value == nil {
		return recordDefaultParam{}
	}
	return r.Lte(*value)
}

func (r recordQueryDateString) Gt(value string) recordDefaultParam {
	return recordDefaultParam{
		data: builder.Field{
			Name: "date",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r recordQueryDateString) GtIfPresent(value *string) recordDefaultParam {
	if value == nil {
		return recordDefaultParam{}
	}
	return r.Gt(*value)
}

func (r recordQueryDateString) Gte(value string) recordDefaultParam {
	return recordDefaultParam{
		data: builder.Field{
			Name: "date",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r recordQueryDateString) GteIfPresent(value *string) recordDefaultParam {
	if value == nil {
		return recordDefaultParam{}
	}
	return r.Gte(*value)
}

func (r recordQueryDateString) Contains(value string) recordDefaultParam {
	return recordDefaultParam{
		data: builder.Field{
			Name: "date",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r recordQueryDateString) ContainsIfPresent(value *string) recordDefaultParam {
	if value == nil {
		return recordDefaultParam{}
	}
	return r.Contains(*value)
}

func (r recordQueryDateString) StartsWith(value string) recordDefaultParam {
	return recordDefaultParam{
		data: builder.Field{
			Name: "date",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r recordQueryDateString) StartsWithIfPresent(value *string) recordDefaultParam {
	if value == nil {
		return recordDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r recordQueryDateString) EndsWith(value string) recordDefaultParam {
	return recordDefaultParam{
		data: builder.Field{
			Name: "date",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r recordQueryDateString) EndsWithIfPresent(value *string) recordDefaultParam {
	if value == nil {
		return recordDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r recordQueryDateString) Mode(value QueryMode) recordDefaultParam {
	return recordDefaultParam{
		data: builder.Field{
			Name: "date",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r recordQueryDateString) ModeIfPresent(value *QueryMode) recordDefaultParam {
	if value == nil {
		return recordDefaultParam{}
	}
	return r.Mode(*value)
}

func (r recordQueryDateString) Not(value string) recordDefaultParam {
	return recordDefaultParam{
		data: builder.Field{
			Name: "date",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r recordQueryDateString) NotIfPresent(value *string) recordDefaultParam {
	if value == nil {
		return recordDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r recordQueryDateString) HasPrefix(value string) recordDefaultParam {
	return recordDefaultParam{
		data: builder.Field{
			Name: "date",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r recordQueryDateString) HasPrefixIfPresent(value *string) recordDefaultParam {
	if value == nil {
		return recordDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r recordQueryDateString) HasSuffix(value string) recordDefaultParam {
	return recordDefaultParam{
		data: builder.Field{
			Name: "date",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r recordQueryDateString) HasSuffixIfPresent(value *string) recordDefaultParam {
	if value == nil {
		return recordDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r recordQueryDateString) Field() recordPrismaFields {
	return recordFieldDate
}

// base struct
type recordQuerySymptomsString struct{}

// Set the required value of Symptoms
func (r recordQuerySymptomsString) Set(value []string) recordSetParam {

	if value == nil {
		value = []string{}
	}

	return recordSetParam{
		data: builder.Field{
			Name: "symptoms",
			Fields: []builder.Field{
				builder.Field{
					Name:  "set",
					Value: value,
				},
			},
		},
	}

}

// Set the optional value of Symptoms dynamically
func (r recordQuerySymptomsString) SetIfPresent(value *[]String) recordSetParam {
	if value == nil {
		return recordSetParam{}
	}

	return r.Set(*value)
}

// Push the required value of Symptoms
func (r recordQuerySymptomsString) Push(value []string) recordSetParam {
	return recordSetParam{
		data: builder.Field{
			Name: "symptoms",
			Fields: []builder.Field{
				builder.Field{
					Name:  "push",
					Value: value,
				},
			},
		},
	}
}

func (r recordQuerySymptomsString) PushIfPresent(value []string) recordSetParam {
	if value == nil {
		return recordSetParam{}
	}
	return r.Push(value)
}

func (r recordQuerySymptomsString) Equals(value []string) recordWithPrismaSymptomsEqualsParam {

	if value == nil {
		value = []string{}
	}

	return recordWithPrismaSymptomsEqualsParam{
		data: builder.Field{
			Name: "symptoms",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r recordQuerySymptomsString) EqualsIfPresent(value []string) recordWithPrismaSymptomsEqualsParam {
	if value == nil {
		return recordWithPrismaSymptomsEqualsParam{}
	}
	return r.Equals(value)
}

func (r recordQuerySymptomsString) Order(direction SortOrder) recordDefaultParam {
	return recordDefaultParam{
		data: builder.Field{
			Name:  "symptoms",
			Value: direction,
		},
	}
}

func (r recordQuerySymptomsString) Cursor(cursor string) recordCursorParam {
	return recordCursorParam{
		data: builder.Field{
			Name:  "symptoms",
			Value: cursor,
		},
	}
}

func (r recordQuerySymptomsString) Has(value string) recordDefaultParam {
	return recordDefaultParam{
		data: builder.Field{
			Name: "symptoms",
			Fields: []builder.Field{
				{
					Name:  "has",
					Value: value,
				},
			},
		},
	}
}

func (r recordQuerySymptomsString) HasIfPresent(value *string) recordDefaultParam {
	if value == nil {
		return recordDefaultParam{}
	}
	return r.Has(*value)
}

func (r recordQuerySymptomsString) HasEvery(value []string) recordDefaultParam {
	return recordDefaultParam{
		data: builder.Field{
			Name: "symptoms",
			Fields: []builder.Field{
				{
					Name:  "hasEvery",
					Value: value,
				},
			},
		},
	}
}

func (r recordQuerySymptomsString) HasEveryIfPresent(value []string) recordDefaultParam {
	if value == nil {
		return recordDefaultParam{}
	}
	return r.HasEvery(value)
}

func (r recordQuerySymptomsString) HasSome(value []string) recordDefaultParam {
	return recordDefaultParam{
		data: builder.Field{
			Name: "symptoms",
			Fields: []builder.Field{
				{
					Name:  "hasSome",
					Value: value,
				},
			},
		},
	}
}

func (r recordQuerySymptomsString) HasSomeIfPresent(value []string) recordDefaultParam {
	if value == nil {
		return recordDefaultParam{}
	}
	return r.HasSome(value)
}

func (r recordQuerySymptomsString) IsEmpty(value bool) recordDefaultParam {
	return recordDefaultParam{
		data: builder.Field{
			Name: "symptoms",
			Fields: []builder.Field{
				{
					Name:  "isEmpty",
					Value: value,
				},
			},
		},
	}
}

func (r recordQuerySymptomsString) IsEmptyIfPresent(value *bool) recordDefaultParam {
	if value == nil {
		return recordDefaultParam{}
	}
	return r.IsEmpty(*value)
}

func (r recordQuerySymptomsString) Field() recordPrismaFields {
	return recordFieldSymptoms
}

// base struct
type recordQueryDiagnosisString struct{}

// Set the required value of Diagnosis
func (r recordQueryDiagnosisString) Set(value []string) recordSetParam {

	if value == nil {
		value = []string{}
	}

	return recordSetParam{
		data: builder.Field{
			Name: "diagnosis",
			Fields: []builder.Field{
				builder.Field{
					Name:  "set",
					Value: value,
				},
			},
		},
	}

}

// Set the optional value of Diagnosis dynamically
func (r recordQueryDiagnosisString) SetIfPresent(value *[]String) recordSetParam {
	if value == nil {
		return recordSetParam{}
	}

	return r.Set(*value)
}

// Push the required value of Diagnosis
func (r recordQueryDiagnosisString) Push(value []string) recordSetParam {
	return recordSetParam{
		data: builder.Field{
			Name: "diagnosis",
			Fields: []builder.Field{
				builder.Field{
					Name:  "push",
					Value: value,
				},
			},
		},
	}
}

func (r recordQueryDiagnosisString) PushIfPresent(value []string) recordSetParam {
	if value == nil {
		return recordSetParam{}
	}
	return r.Push(value)
}

func (r recordQueryDiagnosisString) Equals(value []string) recordWithPrismaDiagnosisEqualsParam {

	if value == nil {
		value = []string{}
	}

	return recordWithPrismaDiagnosisEqualsParam{
		data: builder.Field{
			Name: "diagnosis",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r recordQueryDiagnosisString) EqualsIfPresent(value []string) recordWithPrismaDiagnosisEqualsParam {
	if value == nil {
		return recordWithPrismaDiagnosisEqualsParam{}
	}
	return r.Equals(value)
}

func (r recordQueryDiagnosisString) Order(direction SortOrder) recordDefaultParam {
	return recordDefaultParam{
		data: builder.Field{
			Name:  "diagnosis",
			Value: direction,
		},
	}
}

func (r recordQueryDiagnosisString) Cursor(cursor string) recordCursorParam {
	return recordCursorParam{
		data: builder.Field{
			Name:  "diagnosis",
			Value: cursor,
		},
	}
}

func (r recordQueryDiagnosisString) Has(value string) recordDefaultParam {
	return recordDefaultParam{
		data: builder.Field{
			Name: "diagnosis",
			Fields: []builder.Field{
				{
					Name:  "has",
					Value: value,
				},
			},
		},
	}
}

func (r recordQueryDiagnosisString) HasIfPresent(value *string) recordDefaultParam {
	if value == nil {
		return recordDefaultParam{}
	}
	return r.Has(*value)
}

func (r recordQueryDiagnosisString) HasEvery(value []string) recordDefaultParam {
	return recordDefaultParam{
		data: builder.Field{
			Name: "diagnosis",
			Fields: []builder.Field{
				{
					Name:  "hasEvery",
					Value: value,
				},
			},
		},
	}
}

func (r recordQueryDiagnosisString) HasEveryIfPresent(value []string) recordDefaultParam {
	if value == nil {
		return recordDefaultParam{}
	}
	return r.HasEvery(value)
}

func (r recordQueryDiagnosisString) HasSome(value []string) recordDefaultParam {
	return recordDefaultParam{
		data: builder.Field{
			Name: "diagnosis",
			Fields: []builder.Field{
				{
					Name:  "hasSome",
					Value: value,
				},
			},
		},
	}
}

func (r recordQueryDiagnosisString) HasSomeIfPresent(value []string) recordDefaultParam {
	if value == nil {
		return recordDefaultParam{}
	}
	return r.HasSome(value)
}

func (r recordQueryDiagnosisString) IsEmpty(value bool) recordDefaultParam {
	return recordDefaultParam{
		data: builder.Field{
			Name: "diagnosis",
			Fields: []builder.Field{
				{
					Name:  "isEmpty",
					Value: value,
				},
			},
		},
	}
}

func (r recordQueryDiagnosisString) IsEmptyIfPresent(value *bool) recordDefaultParam {
	if value == nil {
		return recordDefaultParam{}
	}
	return r.IsEmpty(*value)
}

func (r recordQueryDiagnosisString) Field() recordPrismaFields {
	return recordFieldDiagnosis
}

// base struct
type recordQueryTreatmentString struct{}

// Set the required value of Treatment
func (r recordQueryTreatmentString) Set(value []string) recordSetParam {

	if value == nil {
		value = []string{}
	}

	return recordSetParam{
		data: builder.Field{
			Name: "treatment",
			Fields: []builder.Field{
				builder.Field{
					Name:  "set",
					Value: value,
				},
			},
		},
	}

}

// Set the optional value of Treatment dynamically
func (r recordQueryTreatmentString) SetIfPresent(value *[]String) recordSetParam {
	if value == nil {
		return recordSetParam{}
	}

	return r.Set(*value)
}

// Push the required value of Treatment
func (r recordQueryTreatmentString) Push(value []string) recordSetParam {
	return recordSetParam{
		data: builder.Field{
			Name: "treatment",
			Fields: []builder.Field{
				builder.Field{
					Name:  "push",
					Value: value,
				},
			},
		},
	}
}

func (r recordQueryTreatmentString) PushIfPresent(value []string) recordSetParam {
	if value == nil {
		return recordSetParam{}
	}
	return r.Push(value)
}

func (r recordQueryTreatmentString) Equals(value []string) recordWithPrismaTreatmentEqualsParam {

	if value == nil {
		value = []string{}
	}

	return recordWithPrismaTreatmentEqualsParam{
		data: builder.Field{
			Name: "treatment",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r recordQueryTreatmentString) EqualsIfPresent(value []string) recordWithPrismaTreatmentEqualsParam {
	if value == nil {
		return recordWithPrismaTreatmentEqualsParam{}
	}
	return r.Equals(value)
}

func (r recordQueryTreatmentString) Order(direction SortOrder) recordDefaultParam {
	return recordDefaultParam{
		data: builder.Field{
			Name:  "treatment",
			Value: direction,
		},
	}
}

func (r recordQueryTreatmentString) Cursor(cursor string) recordCursorParam {
	return recordCursorParam{
		data: builder.Field{
			Name:  "treatment",
			Value: cursor,
		},
	}
}

func (r recordQueryTreatmentString) Has(value string) recordDefaultParam {
	return recordDefaultParam{
		data: builder.Field{
			Name: "treatment",
			Fields: []builder.Field{
				{
					Name:  "has",
					Value: value,
				},
			},
		},
	}
}

func (r recordQueryTreatmentString) HasIfPresent(value *string) recordDefaultParam {
	if value == nil {
		return recordDefaultParam{}
	}
	return r.Has(*value)
}

func (r recordQueryTreatmentString) HasEvery(value []string) recordDefaultParam {
	return recordDefaultParam{
		data: builder.Field{
			Name: "treatment",
			Fields: []builder.Field{
				{
					Name:  "hasEvery",
					Value: value,
				},
			},
		},
	}
}

func (r recordQueryTreatmentString) HasEveryIfPresent(value []string) recordDefaultParam {
	if value == nil {
		return recordDefaultParam{}
	}
	return r.HasEvery(value)
}

func (r recordQueryTreatmentString) HasSome(value []string) recordDefaultParam {
	return recordDefaultParam{
		data: builder.Field{
			Name: "treatment",
			Fields: []builder.Field{
				{
					Name:  "hasSome",
					Value: value,
				},
			},
		},
	}
}

func (r recordQueryTreatmentString) HasSomeIfPresent(value []string) recordDefaultParam {
	if value == nil {
		return recordDefaultParam{}
	}
	return r.HasSome(value)
}

func (r recordQueryTreatmentString) IsEmpty(value bool) recordDefaultParam {
	return recordDefaultParam{
		data: builder.Field{
			Name: "treatment",
			Fields: []builder.Field{
				{
					Name:  "isEmpty",
					Value: value,
				},
			},
		},
	}
}

func (r recordQueryTreatmentString) IsEmptyIfPresent(value *bool) recordDefaultParam {
	if value == nil {
		return recordDefaultParam{}
	}
	return r.IsEmpty(*value)
}

func (r recordQueryTreatmentString) Field() recordPrismaFields {
	return recordFieldTreatment
}

// base struct
type recordQueryReportsString struct{}

// Set the required value of Reports
func (r recordQueryReportsString) Set(value []string) recordSetParam {

	if value == nil {
		value = []string{}
	}

	return recordSetParam{
		data: builder.Field{
			Name: "reports",
			Fields: []builder.Field{
				builder.Field{
					Name:  "set",
					Value: value,
				},
			},
		},
	}

}

// Set the optional value of Reports dynamically
func (r recordQueryReportsString) SetIfPresent(value *[]String) recordSetParam {
	if value == nil {
		return recordSetParam{}
	}

	return r.Set(*value)
}

// Push the required value of Reports
func (r recordQueryReportsString) Push(value []string) recordSetParam {
	return recordSetParam{
		data: builder.Field{
			Name: "reports",
			Fields: []builder.Field{
				builder.Field{
					Name:  "push",
					Value: value,
				},
			},
		},
	}
}

func (r recordQueryReportsString) PushIfPresent(value []string) recordSetParam {
	if value == nil {
		return recordSetParam{}
	}
	return r.Push(value)
}

func (r recordQueryReportsString) Equals(value []string) recordWithPrismaReportsEqualsParam {

	if value == nil {
		value = []string{}
	}

	return recordWithPrismaReportsEqualsParam{
		data: builder.Field{
			Name: "reports",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r recordQueryReportsString) EqualsIfPresent(value []string) recordWithPrismaReportsEqualsParam {
	if value == nil {
		return recordWithPrismaReportsEqualsParam{}
	}
	return r.Equals(value)
}

func (r recordQueryReportsString) Order(direction SortOrder) recordDefaultParam {
	return recordDefaultParam{
		data: builder.Field{
			Name:  "reports",
			Value: direction,
		},
	}
}

func (r recordQueryReportsString) Cursor(cursor string) recordCursorParam {
	return recordCursorParam{
		data: builder.Field{
			Name:  "reports",
			Value: cursor,
		},
	}
}

func (r recordQueryReportsString) Has(value string) recordDefaultParam {
	return recordDefaultParam{
		data: builder.Field{
			Name: "reports",
			Fields: []builder.Field{
				{
					Name:  "has",
					Value: value,
				},
			},
		},
	}
}

func (r recordQueryReportsString) HasIfPresent(value *string) recordDefaultParam {
	if value == nil {
		return recordDefaultParam{}
	}
	return r.Has(*value)
}

func (r recordQueryReportsString) HasEvery(value []string) recordDefaultParam {
	return recordDefaultParam{
		data: builder.Field{
			Name: "reports",
			Fields: []builder.Field{
				{
					Name:  "hasEvery",
					Value: value,
				},
			},
		},
	}
}

func (r recordQueryReportsString) HasEveryIfPresent(value []string) recordDefaultParam {
	if value == nil {
		return recordDefaultParam{}
	}
	return r.HasEvery(value)
}

func (r recordQueryReportsString) HasSome(value []string) recordDefaultParam {
	return recordDefaultParam{
		data: builder.Field{
			Name: "reports",
			Fields: []builder.Field{
				{
					Name:  "hasSome",
					Value: value,
				},
			},
		},
	}
}

func (r recordQueryReportsString) HasSomeIfPresent(value []string) recordDefaultParam {
	if value == nil {
		return recordDefaultParam{}
	}
	return r.HasSome(value)
}

func (r recordQueryReportsString) IsEmpty(value bool) recordDefaultParam {
	return recordDefaultParam{
		data: builder.Field{
			Name: "reports",
			Fields: []builder.Field{
				{
					Name:  "isEmpty",
					Value: value,
				},
			},
		},
	}
}

func (r recordQueryReportsString) IsEmptyIfPresent(value *bool) recordDefaultParam {
	if value == nil {
		return recordDefaultParam{}
	}
	return r.IsEmpty(*value)
}

func (r recordQueryReportsString) Field() recordPrismaFields {
	return recordFieldReports
}

// base struct
type recordQueryUserUser struct{}

type recordQueryUserRelations struct{}

// Record -> User
//
// @relation
// @required
func (recordQueryUserRelations) Where(
	params ...UserWhereParam,
) recordDefaultParam {
	var fields []builder.Field

	for _, q := range params {
		fields = append(fields, q.field())
	}

	return recordDefaultParam{
		data: builder.Field{
			Name: "user",
			Fields: []builder.Field{
				{
					Name:   "is",
					Fields: fields,
				},
			},
		},
	}
}

func (recordQueryUserRelations) Fetch() recordToUserFindUnique {
	var v recordToUserFindUnique

	v.query.Operation = "query"
	v.query.Method = "user"
	v.query.Outputs = userOutput

	return v
}

func (r recordQueryUserRelations) Link(
	params UserWhereParam,
) recordWithPrismaUserSetParam {
	var fields []builder.Field

	f := params.field()
	if f.Fields == nil && f.Value == nil {
		return recordWithPrismaUserSetParam{}
	}

	fields = append(fields, f)

	return recordWithPrismaUserSetParam{
		data: builder.Field{
			Name: "user",
			Fields: []builder.Field{
				{
					Name:   "connect",
					Fields: builder.TransformEquals(fields),
				},
			},
		},
	}
}

func (r recordQueryUserRelations) Unlink() recordWithPrismaUserSetParam {
	var v recordWithPrismaUserSetParam

	v = recordWithPrismaUserSetParam{
		data: builder.Field{
			Name: "user",
			Fields: []builder.Field{
				{
					Name:  "disconnect",
					Value: true,
				},
			},
		},
	}

	return v
}

func (r recordQueryUserUser) Field() recordPrismaFields {
	return recordFieldUser
}

// base struct
type recordQueryUserIDString struct{}

// Set the required value of UserID
func (r recordQueryUserIDString) Set(value string) recordSetParam {

	return recordSetParam{
		data: builder.Field{
			Name:  "userId",
			Value: value,
		},
	}

}

// Set the optional value of UserID dynamically
func (r recordQueryUserIDString) SetIfPresent(value *String) recordSetParam {
	if value == nil {
		return recordSetParam{}
	}

	return r.Set(*value)
}

func (r recordQueryUserIDString) Equals(value string) recordWithPrismaUserIDEqualsParam {

	return recordWithPrismaUserIDEqualsParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "equals",
					Value: value,
				},
			},
		},
	}
}

func (r recordQueryUserIDString) EqualsIfPresent(value *string) recordWithPrismaUserIDEqualsParam {
	if value == nil {
		return recordWithPrismaUserIDEqualsParam{}
	}
	return r.Equals(*value)
}

func (r recordQueryUserIDString) Order(direction SortOrder) recordDefaultParam {
	return recordDefaultParam{
		data: builder.Field{
			Name:  "userId",
			Value: direction,
		},
	}
}

func (r recordQueryUserIDString) Cursor(cursor string) recordCursorParam {
	return recordCursorParam{
		data: builder.Field{
			Name:  "userId",
			Value: cursor,
		},
	}
}

func (r recordQueryUserIDString) In(value []string) recordDefaultParam {
	return recordDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "in",
					Value: value,
				},
			},
		},
	}
}

func (r recordQueryUserIDString) InIfPresent(value []string) recordDefaultParam {
	if value == nil {
		return recordDefaultParam{}
	}
	return r.In(value)
}

func (r recordQueryUserIDString) NotIn(value []string) recordDefaultParam {
	return recordDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "notIn",
					Value: value,
				},
			},
		},
	}
}

func (r recordQueryUserIDString) NotInIfPresent(value []string) recordDefaultParam {
	if value == nil {
		return recordDefaultParam{}
	}
	return r.NotIn(value)
}

func (r recordQueryUserIDString) Lt(value string) recordDefaultParam {
	return recordDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "lt",
					Value: value,
				},
			},
		},
	}
}

func (r recordQueryUserIDString) LtIfPresent(value *string) recordDefaultParam {
	if value == nil {
		return recordDefaultParam{}
	}
	return r.Lt(*value)
}

func (r recordQueryUserIDString) Lte(value string) recordDefaultParam {
	return recordDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "lte",
					Value: value,
				},
			},
		},
	}
}

func (r recordQueryUserIDString) LteIfPresent(value *string) recordDefaultParam {
	if value == nil {
		return recordDefaultParam{}
	}
	return r.Lte(*value)
}

func (r recordQueryUserIDString) Gt(value string) recordDefaultParam {
	return recordDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "gt",
					Value: value,
				},
			},
		},
	}
}

func (r recordQueryUserIDString) GtIfPresent(value *string) recordDefaultParam {
	if value == nil {
		return recordDefaultParam{}
	}
	return r.Gt(*value)
}

func (r recordQueryUserIDString) Gte(value string) recordDefaultParam {
	return recordDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "gte",
					Value: value,
				},
			},
		},
	}
}

func (r recordQueryUserIDString) GteIfPresent(value *string) recordDefaultParam {
	if value == nil {
		return recordDefaultParam{}
	}
	return r.Gte(*value)
}

func (r recordQueryUserIDString) Contains(value string) recordDefaultParam {
	return recordDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "contains",
					Value: value,
				},
			},
		},
	}
}

func (r recordQueryUserIDString) ContainsIfPresent(value *string) recordDefaultParam {
	if value == nil {
		return recordDefaultParam{}
	}
	return r.Contains(*value)
}

func (r recordQueryUserIDString) StartsWith(value string) recordDefaultParam {
	return recordDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "startsWith",
					Value: value,
				},
			},
		},
	}
}

func (r recordQueryUserIDString) StartsWithIfPresent(value *string) recordDefaultParam {
	if value == nil {
		return recordDefaultParam{}
	}
	return r.StartsWith(*value)
}

func (r recordQueryUserIDString) EndsWith(value string) recordDefaultParam {
	return recordDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "endsWith",
					Value: value,
				},
			},
		},
	}
}

func (r recordQueryUserIDString) EndsWithIfPresent(value *string) recordDefaultParam {
	if value == nil {
		return recordDefaultParam{}
	}
	return r.EndsWith(*value)
}

func (r recordQueryUserIDString) Mode(value QueryMode) recordDefaultParam {
	return recordDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "mode",
					Value: value,
				},
			},
		},
	}
}

func (r recordQueryUserIDString) ModeIfPresent(value *QueryMode) recordDefaultParam {
	if value == nil {
		return recordDefaultParam{}
	}
	return r.Mode(*value)
}

func (r recordQueryUserIDString) Not(value string) recordDefaultParam {
	return recordDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "not",
					Value: value,
				},
			},
		},
	}
}

func (r recordQueryUserIDString) NotIfPresent(value *string) recordDefaultParam {
	if value == nil {
		return recordDefaultParam{}
	}
	return r.Not(*value)
}

// deprecated: Use StartsWith instead.

func (r recordQueryUserIDString) HasPrefix(value string) recordDefaultParam {
	return recordDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "starts_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use StartsWithIfPresent instead.
func (r recordQueryUserIDString) HasPrefixIfPresent(value *string) recordDefaultParam {
	if value == nil {
		return recordDefaultParam{}
	}
	return r.HasPrefix(*value)
}

// deprecated: Use EndsWith instead.

func (r recordQueryUserIDString) HasSuffix(value string) recordDefaultParam {
	return recordDefaultParam{
		data: builder.Field{
			Name: "userId",
			Fields: []builder.Field{
				{
					Name:  "ends_with",
					Value: value,
				},
			},
		},
	}
}

// deprecated: Use EndsWithIfPresent instead.
func (r recordQueryUserIDString) HasSuffixIfPresent(value *string) recordDefaultParam {
	if value == nil {
		return recordDefaultParam{}
	}
	return r.HasSuffix(*value)
}

func (r recordQueryUserIDString) Field() recordPrismaFields {
	return recordFieldUserID
}

// --- template actions.gotpl ---
var countOutput = []builder.Output{
	{Name: "count"},
}

type userActions struct {
	// client holds the prisma client
	client *PrismaClient
}

var userOutput = []builder.Output{
	{Name: "id"},
	{Name: "name"},
	{Name: "username"},
	{Name: "height"},
	{Name: "weight"},
	{Name: "age"},
	{Name: "bloodgroup"},
	{Name: "gender"},
	{Name: "address"},
	{Name: "image"},
	{Name: "authId"},
}

type UserRelationWith interface {
	getQuery() builder.Query
	with()
	userRelation()
}

type UserWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
}

type userDefaultParam struct {
	data  builder.Field
	query builder.Query
}

func (p userDefaultParam) field() builder.Field {
	return p.data
}

func (p userDefaultParam) getQuery() builder.Query {
	return p.query
}

func (p userDefaultParam) userModel() {}

type UserOrderByParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
}

type userOrderByParam struct {
	data  builder.Field
	query builder.Query
}

func (p userOrderByParam) field() builder.Field {
	return p.data
}

func (p userOrderByParam) getQuery() builder.Query {
	return p.query
}

func (p userOrderByParam) userModel() {}

type UserCursorParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	isCursor()
}

type userCursorParam struct {
	data  builder.Field
	query builder.Query
}

func (p userCursorParam) field() builder.Field {
	return p.data
}

func (p userCursorParam) isCursor() {}

func (p userCursorParam) getQuery() builder.Query {
	return p.query
}

func (p userCursorParam) userModel() {}

type UserParamUnique interface {
	field() builder.Field
	getQuery() builder.Query
	unique()
	userModel()
}

type userParamUnique struct {
	data  builder.Field
	query builder.Query
}

func (p userParamUnique) userModel() {}

func (userParamUnique) unique() {}

func (p userParamUnique) field() builder.Field {
	return p.data
}

func (p userParamUnique) getQuery() builder.Query {
	return p.query
}

type UserEqualsWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
}

type userEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userEqualsParam) userModel() {}

func (userEqualsParam) equals() {}

func (p userEqualsParam) field() builder.Field {
	return p.data
}

func (p userEqualsParam) getQuery() builder.Query {
	return p.query
}

type UserEqualsUniqueWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	unique()
	userModel()
}

type userEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userEqualsUniqueParam) userModel() {}

func (userEqualsUniqueParam) unique() {}
func (userEqualsUniqueParam) equals() {}

func (p userEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

type UserSetParam interface {
	field() builder.Field
	settable()
	userModel()
}

type userSetParam struct {
	data builder.Field
}

// authIDField implements UserWithPrismaAuthIDSetParam.
func (p userSetParam) authIDField() {
	panic("unimplemented")
}

// getQuery implements UserWithPrismaAuthIDSetParam.
func (p userSetParam) getQuery() builder.Query {
	panic("unimplemented")
}

func (userSetParam) settable() {}

func (p userSetParam) field() builder.Field {
	return p.data
}

func (p userSetParam) userModel() {}

type UserWithPrismaIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	idField()
}

type UserWithPrismaIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	idField()
}

type userWithPrismaIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaIDSetParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaIDSetParam) userModel() {}

func (p userWithPrismaIDSetParam) idField() {}

type UserWithPrismaIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	idField()
}

type userWithPrismaIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaIDEqualsParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaIDEqualsParam) userModel() {}

func (p userWithPrismaIDEqualsParam) idField() {}

func (userWithPrismaIDSetParam) settable()  {}
func (userWithPrismaIDEqualsParam) equals() {}

type userWithPrismaIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaIDEqualsUniqueParam) userModel() {}
func (p userWithPrismaIDEqualsUniqueParam) idField()   {}

func (userWithPrismaIDEqualsUniqueParam) unique() {}
func (userWithPrismaIDEqualsUniqueParam) equals() {}

type UserWithPrismaNameEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	nameField()
}

type UserWithPrismaNameSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	nameField()
}

type userWithPrismaNameSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaNameSetParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaNameSetParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaNameSetParam) userModel() {}

func (p userWithPrismaNameSetParam) nameField() {}

type UserWithPrismaNameWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	nameField()
}

type userWithPrismaNameEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaNameEqualsParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaNameEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaNameEqualsParam) userModel() {}

func (p userWithPrismaNameEqualsParam) nameField() {}

func (userWithPrismaNameSetParam) settable()  {}
func (userWithPrismaNameEqualsParam) equals() {}

type userWithPrismaNameEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaNameEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaNameEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaNameEqualsUniqueParam) userModel() {}
func (p userWithPrismaNameEqualsUniqueParam) nameField() {}

func (userWithPrismaNameEqualsUniqueParam) unique() {}
func (userWithPrismaNameEqualsUniqueParam) equals() {}

type UserWithPrismaUsernameEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	usernameField()
}

type UserWithPrismaUsernameSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	usernameField()
}

type userWithPrismaUsernameSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaUsernameSetParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaUsernameSetParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaUsernameSetParam) userModel() {}

func (p userWithPrismaUsernameSetParam) usernameField() {}

type UserWithPrismaUsernameWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	usernameField()
}

type userWithPrismaUsernameEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaUsernameEqualsParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaUsernameEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaUsernameEqualsParam) userModel() {}

func (p userWithPrismaUsernameEqualsParam) usernameField() {}

func (userWithPrismaUsernameSetParam) settable()  {}
func (userWithPrismaUsernameEqualsParam) equals() {}

type userWithPrismaUsernameEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaUsernameEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaUsernameEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaUsernameEqualsUniqueParam) userModel()     {}
func (p userWithPrismaUsernameEqualsUniqueParam) usernameField() {}

func (userWithPrismaUsernameEqualsUniqueParam) unique() {}
func (userWithPrismaUsernameEqualsUniqueParam) equals() {}

type UserWithPrismaHeightEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	heightField()
}

type UserWithPrismaHeightSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	heightField()
}

type userWithPrismaHeightSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaHeightSetParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaHeightSetParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaHeightSetParam) userModel() {}

func (p userWithPrismaHeightSetParam) heightField() {}

type UserWithPrismaHeightWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	heightField()
}

type userWithPrismaHeightEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaHeightEqualsParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaHeightEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaHeightEqualsParam) userModel() {}

func (p userWithPrismaHeightEqualsParam) heightField() {}

func (userWithPrismaHeightSetParam) settable()  {}
func (userWithPrismaHeightEqualsParam) equals() {}

type userWithPrismaHeightEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaHeightEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaHeightEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaHeightEqualsUniqueParam) userModel()   {}
func (p userWithPrismaHeightEqualsUniqueParam) heightField() {}

func (userWithPrismaHeightEqualsUniqueParam) unique() {}
func (userWithPrismaHeightEqualsUniqueParam) equals() {}

type UserWithPrismaWeightEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	weightField()
}

type UserWithPrismaWeightSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	weightField()
}

type userWithPrismaWeightSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaWeightSetParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaWeightSetParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaWeightSetParam) userModel() {}

func (p userWithPrismaWeightSetParam) weightField() {}

type UserWithPrismaWeightWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	weightField()
}

type userWithPrismaWeightEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaWeightEqualsParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaWeightEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaWeightEqualsParam) userModel() {}

func (p userWithPrismaWeightEqualsParam) weightField() {}

func (userWithPrismaWeightSetParam) settable()  {}
func (userWithPrismaWeightEqualsParam) equals() {}

type userWithPrismaWeightEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaWeightEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaWeightEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaWeightEqualsUniqueParam) userModel()   {}
func (p userWithPrismaWeightEqualsUniqueParam) weightField() {}

func (userWithPrismaWeightEqualsUniqueParam) unique() {}
func (userWithPrismaWeightEqualsUniqueParam) equals() {}

type UserWithPrismaAgeEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	ageField()
}

type UserWithPrismaAgeSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	ageField()
}

type userWithPrismaAgeSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaAgeSetParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaAgeSetParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaAgeSetParam) userModel() {}

func (p userWithPrismaAgeSetParam) ageField() {}

type UserWithPrismaAgeWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	ageField()
}

type userWithPrismaAgeEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaAgeEqualsParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaAgeEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaAgeEqualsParam) userModel() {}

func (p userWithPrismaAgeEqualsParam) ageField() {}

func (userWithPrismaAgeSetParam) settable()  {}
func (userWithPrismaAgeEqualsParam) equals() {}

type userWithPrismaAgeEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaAgeEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaAgeEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaAgeEqualsUniqueParam) userModel() {}
func (p userWithPrismaAgeEqualsUniqueParam) ageField()  {}

func (userWithPrismaAgeEqualsUniqueParam) unique() {}
func (userWithPrismaAgeEqualsUniqueParam) equals() {}

type UserWithPrismaBloodgroupEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	bloodgroupField()
}

type UserWithPrismaBloodgroupSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	bloodgroupField()
}

type userWithPrismaBloodgroupSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaBloodgroupSetParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaBloodgroupSetParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaBloodgroupSetParam) userModel() {}

func (p userWithPrismaBloodgroupSetParam) bloodgroupField() {}

type UserWithPrismaBloodgroupWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	bloodgroupField()
}

type userWithPrismaBloodgroupEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaBloodgroupEqualsParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaBloodgroupEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaBloodgroupEqualsParam) userModel() {}

func (p userWithPrismaBloodgroupEqualsParam) bloodgroupField() {}

func (userWithPrismaBloodgroupSetParam) settable()  {}
func (userWithPrismaBloodgroupEqualsParam) equals() {}

type userWithPrismaBloodgroupEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaBloodgroupEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaBloodgroupEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaBloodgroupEqualsUniqueParam) userModel()       {}
func (p userWithPrismaBloodgroupEqualsUniqueParam) bloodgroupField() {}

func (userWithPrismaBloodgroupEqualsUniqueParam) unique() {}
func (userWithPrismaBloodgroupEqualsUniqueParam) equals() {}

type UserWithPrismaGenderEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	genderField()
}

type UserWithPrismaGenderSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	genderField()
}

type userWithPrismaGenderSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaGenderSetParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaGenderSetParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaGenderSetParam) userModel() {}

func (p userWithPrismaGenderSetParam) genderField() {}

type UserWithPrismaGenderWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	genderField()
}

type userWithPrismaGenderEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaGenderEqualsParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaGenderEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaGenderEqualsParam) userModel() {}

func (p userWithPrismaGenderEqualsParam) genderField() {}

func (userWithPrismaGenderSetParam) settable()  {}
func (userWithPrismaGenderEqualsParam) equals() {}

type userWithPrismaGenderEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaGenderEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaGenderEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaGenderEqualsUniqueParam) userModel()   {}
func (p userWithPrismaGenderEqualsUniqueParam) genderField() {}

func (userWithPrismaGenderEqualsUniqueParam) unique() {}
func (userWithPrismaGenderEqualsUniqueParam) equals() {}

type UserWithPrismaRecordsEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	recordsField()
}

type UserWithPrismaRecordsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	recordsField()
}

type userWithPrismaRecordsSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaRecordsSetParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaRecordsSetParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaRecordsSetParam) userModel() {}

func (p userWithPrismaRecordsSetParam) recordsField() {}

type UserWithPrismaRecordsWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	recordsField()
}

type userWithPrismaRecordsEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaRecordsEqualsParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaRecordsEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaRecordsEqualsParam) userModel() {}

func (p userWithPrismaRecordsEqualsParam) recordsField() {}

func (userWithPrismaRecordsSetParam) settable()  {}
func (userWithPrismaRecordsEqualsParam) equals() {}

type userWithPrismaRecordsEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaRecordsEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaRecordsEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaRecordsEqualsUniqueParam) userModel()    {}
func (p userWithPrismaRecordsEqualsUniqueParam) recordsField() {}

func (userWithPrismaRecordsEqualsUniqueParam) unique() {}
func (userWithPrismaRecordsEqualsUniqueParam) equals() {}

type UserWithPrismaAddressEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	addressField()
}

type UserWithPrismaAddressSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	addressField()
}

type userWithPrismaAddressSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaAddressSetParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaAddressSetParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaAddressSetParam) userModel() {}

func (p userWithPrismaAddressSetParam) addressField() {}

type UserWithPrismaAddressWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	addressField()
}

type userWithPrismaAddressEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaAddressEqualsParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaAddressEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaAddressEqualsParam) userModel() {}

func (p userWithPrismaAddressEqualsParam) addressField() {}

func (userWithPrismaAddressSetParam) settable()  {}
func (userWithPrismaAddressEqualsParam) equals() {}

type userWithPrismaAddressEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaAddressEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaAddressEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaAddressEqualsUniqueParam) userModel()    {}
func (p userWithPrismaAddressEqualsUniqueParam) addressField() {}

func (userWithPrismaAddressEqualsUniqueParam) unique() {}
func (userWithPrismaAddressEqualsUniqueParam) equals() {}

type UserWithPrismaImageEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	imageField()
}

type UserWithPrismaImageSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	imageField()
}

type userWithPrismaImageSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaImageSetParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaImageSetParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaImageSetParam) userModel() {}

func (p userWithPrismaImageSetParam) imageField() {}

type UserWithPrismaImageWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	imageField()
}

type userWithPrismaImageEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaImageEqualsParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaImageEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaImageEqualsParam) userModel() {}

func (p userWithPrismaImageEqualsParam) imageField() {}

func (userWithPrismaImageSetParam) settable()  {}
func (userWithPrismaImageEqualsParam) equals() {}

type userWithPrismaImageEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaImageEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaImageEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaImageEqualsUniqueParam) userModel()  {}
func (p userWithPrismaImageEqualsUniqueParam) imageField() {}

func (userWithPrismaImageEqualsUniqueParam) unique() {}
func (userWithPrismaImageEqualsUniqueParam) equals() {}

type UserWithPrismaAuthIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	userModel()
	authIDField()
}

type UserWithPrismaAuthIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	authIDField()
}

type userWithPrismaAuthIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaAuthIDSetParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaAuthIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaAuthIDSetParam) userModel() {}

func (p userWithPrismaAuthIDSetParam) authIDField() {}

type UserWithPrismaAuthIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	userModel()
	authIDField()
}

type userWithPrismaAuthIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaAuthIDEqualsParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaAuthIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaAuthIDEqualsParam) userModel() {}

func (p userWithPrismaAuthIDEqualsParam) authIDField() {}

func (userWithPrismaAuthIDSetParam) settable()  {}
func (userWithPrismaAuthIDEqualsParam) equals() {}

type userWithPrismaAuthIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p userWithPrismaAuthIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p userWithPrismaAuthIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p userWithPrismaAuthIDEqualsUniqueParam) userModel()   {}
func (p userWithPrismaAuthIDEqualsUniqueParam) authIDField() {}

func (userWithPrismaAuthIDEqualsUniqueParam) unique() {}
func (userWithPrismaAuthIDEqualsUniqueParam) equals() {}

type recordActions struct {
	// client holds the prisma client
	client *PrismaClient
}

var recordOutput = []builder.Output{
	{Name: "id"},
	{Name: "title"},
	{Name: "date"},
	{Name: "symptoms"},
	{Name: "diagnosis"},
	{Name: "treatment"},
	{Name: "reports"},
	{Name: "userId"},
}

type RecordRelationWith interface {
	getQuery() builder.Query
	with()
	recordRelation()
}

type RecordWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	recordModel()
}

type recordDefaultParam struct {
	data  builder.Field
	query builder.Query
}

func (p recordDefaultParam) field() builder.Field {
	return p.data
}

func (p recordDefaultParam) getQuery() builder.Query {
	return p.query
}

func (p recordDefaultParam) recordModel() {}

type RecordOrderByParam interface {
	field() builder.Field
	getQuery() builder.Query
	recordModel()
}

type recordOrderByParam struct {
	data  builder.Field
	query builder.Query
}

func (p recordOrderByParam) field() builder.Field {
	return p.data
}

func (p recordOrderByParam) getQuery() builder.Query {
	return p.query
}

func (p recordOrderByParam) recordModel() {}

type RecordCursorParam interface {
	field() builder.Field
	getQuery() builder.Query
	recordModel()
	isCursor()
}

type recordCursorParam struct {
	data  builder.Field
	query builder.Query
}

func (p recordCursorParam) field() builder.Field {
	return p.data
}

func (p recordCursorParam) isCursor() {}

func (p recordCursorParam) getQuery() builder.Query {
	return p.query
}

func (p recordCursorParam) recordModel() {}

type RecordParamUnique interface {
	field() builder.Field
	getQuery() builder.Query
	unique()
	recordModel()
}

type recordParamUnique struct {
	data  builder.Field
	query builder.Query
}

func (p recordParamUnique) recordModel() {}

func (recordParamUnique) unique() {}

func (p recordParamUnique) field() builder.Field {
	return p.data
}

func (p recordParamUnique) getQuery() builder.Query {
	return p.query
}

type RecordEqualsWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	recordModel()
}

type recordEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p recordEqualsParam) recordModel() {}

func (recordEqualsParam) equals() {}

func (p recordEqualsParam) field() builder.Field {
	return p.data
}

func (p recordEqualsParam) getQuery() builder.Query {
	return p.query
}

type RecordEqualsUniqueWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	unique()
	recordModel()
}

type recordEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p recordEqualsUniqueParam) recordModel() {}

func (recordEqualsUniqueParam) unique() {}
func (recordEqualsUniqueParam) equals() {}

func (p recordEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p recordEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

type RecordSetParam interface {
	field() builder.Field
	settable()
	recordModel()
}

type recordSetParam struct {
	data builder.Field
}

func (recordSetParam) settable() {}

func (p recordSetParam) field() builder.Field {
	return p.data
}

func (p recordSetParam) recordModel() {}

type RecordWithPrismaIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	recordModel()
	idField()
}

type RecordWithPrismaIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	recordModel()
	idField()
}

type recordWithPrismaIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p recordWithPrismaIDSetParam) field() builder.Field {
	return p.data
}

func (p recordWithPrismaIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p recordWithPrismaIDSetParam) recordModel() {}

func (p recordWithPrismaIDSetParam) idField() {}

type RecordWithPrismaIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	recordModel()
	idField()
}

type recordWithPrismaIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p recordWithPrismaIDEqualsParam) field() builder.Field {
	return p.data
}

func (p recordWithPrismaIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p recordWithPrismaIDEqualsParam) recordModel() {}

func (p recordWithPrismaIDEqualsParam) idField() {}

func (recordWithPrismaIDSetParam) settable()  {}
func (recordWithPrismaIDEqualsParam) equals() {}

type recordWithPrismaIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p recordWithPrismaIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p recordWithPrismaIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p recordWithPrismaIDEqualsUniqueParam) recordModel() {}
func (p recordWithPrismaIDEqualsUniqueParam) idField()     {}

func (recordWithPrismaIDEqualsUniqueParam) unique() {}
func (recordWithPrismaIDEqualsUniqueParam) equals() {}

type RecordWithPrismaTitleEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	recordModel()
	titleField()
}

type RecordWithPrismaTitleSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	recordModel()
	titleField()
}

type recordWithPrismaTitleSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p recordWithPrismaTitleSetParam) field() builder.Field {
	return p.data
}

func (p recordWithPrismaTitleSetParam) getQuery() builder.Query {
	return p.query
}

func (p recordWithPrismaTitleSetParam) recordModel() {}

func (p recordWithPrismaTitleSetParam) titleField() {}

type RecordWithPrismaTitleWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	recordModel()
	titleField()
}

type recordWithPrismaTitleEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p recordWithPrismaTitleEqualsParam) field() builder.Field {
	return p.data
}

func (p recordWithPrismaTitleEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p recordWithPrismaTitleEqualsParam) recordModel() {}

func (p recordWithPrismaTitleEqualsParam) titleField() {}

func (recordWithPrismaTitleSetParam) settable()  {}
func (recordWithPrismaTitleEqualsParam) equals() {}

type recordWithPrismaTitleEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p recordWithPrismaTitleEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p recordWithPrismaTitleEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p recordWithPrismaTitleEqualsUniqueParam) recordModel() {}
func (p recordWithPrismaTitleEqualsUniqueParam) titleField()  {}

func (recordWithPrismaTitleEqualsUniqueParam) unique() {}
func (recordWithPrismaTitleEqualsUniqueParam) equals() {}

type RecordWithPrismaDateEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	recordModel()
	dateField()
}

type RecordWithPrismaDateSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	recordModel()
	dateField()
}

type recordWithPrismaDateSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p recordWithPrismaDateSetParam) field() builder.Field {
	return p.data
}

func (p recordWithPrismaDateSetParam) getQuery() builder.Query {
	return p.query
}

func (p recordWithPrismaDateSetParam) recordModel() {}

func (p recordWithPrismaDateSetParam) dateField() {}

type RecordWithPrismaDateWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	recordModel()
	dateField()
}

type recordWithPrismaDateEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p recordWithPrismaDateEqualsParam) field() builder.Field {
	return p.data
}

func (p recordWithPrismaDateEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p recordWithPrismaDateEqualsParam) recordModel() {}

func (p recordWithPrismaDateEqualsParam) dateField() {}

func (recordWithPrismaDateSetParam) settable()  {}
func (recordWithPrismaDateEqualsParam) equals() {}

type recordWithPrismaDateEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p recordWithPrismaDateEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p recordWithPrismaDateEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p recordWithPrismaDateEqualsUniqueParam) recordModel() {}
func (p recordWithPrismaDateEqualsUniqueParam) dateField()   {}

func (recordWithPrismaDateEqualsUniqueParam) unique() {}
func (recordWithPrismaDateEqualsUniqueParam) equals() {}

type RecordWithPrismaSymptomsEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	recordModel()
	symptomsField()
}

type RecordWithPrismaSymptomsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	recordModel()
	symptomsField()
}

type recordWithPrismaSymptomsSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p recordWithPrismaSymptomsSetParam) field() builder.Field {
	return p.data
}

func (p recordWithPrismaSymptomsSetParam) getQuery() builder.Query {
	return p.query
}

func (p recordWithPrismaSymptomsSetParam) recordModel() {}

func (p recordWithPrismaSymptomsSetParam) symptomsField() {}

type RecordWithPrismaSymptomsWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	recordModel()
	symptomsField()
}

type recordWithPrismaSymptomsEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p recordWithPrismaSymptomsEqualsParam) field() builder.Field {
	return p.data
}

func (p recordWithPrismaSymptomsEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p recordWithPrismaSymptomsEqualsParam) recordModel() {}

func (p recordWithPrismaSymptomsEqualsParam) symptomsField() {}

func (recordWithPrismaSymptomsSetParam) settable()  {}
func (recordWithPrismaSymptomsEqualsParam) equals() {}

type recordWithPrismaSymptomsEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p recordWithPrismaSymptomsEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p recordWithPrismaSymptomsEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p recordWithPrismaSymptomsEqualsUniqueParam) recordModel()   {}
func (p recordWithPrismaSymptomsEqualsUniqueParam) symptomsField() {}

func (recordWithPrismaSymptomsEqualsUniqueParam) unique() {}
func (recordWithPrismaSymptomsEqualsUniqueParam) equals() {}

type RecordWithPrismaDiagnosisEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	recordModel()
	diagnosisField()
}

type RecordWithPrismaDiagnosisSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	recordModel()
	diagnosisField()
}

type recordWithPrismaDiagnosisSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p recordWithPrismaDiagnosisSetParam) field() builder.Field {
	return p.data
}

func (p recordWithPrismaDiagnosisSetParam) getQuery() builder.Query {
	return p.query
}

func (p recordWithPrismaDiagnosisSetParam) recordModel() {}

func (p recordWithPrismaDiagnosisSetParam) diagnosisField() {}

type RecordWithPrismaDiagnosisWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	recordModel()
	diagnosisField()
}

type recordWithPrismaDiagnosisEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p recordWithPrismaDiagnosisEqualsParam) field() builder.Field {
	return p.data
}

func (p recordWithPrismaDiagnosisEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p recordWithPrismaDiagnosisEqualsParam) recordModel() {}

func (p recordWithPrismaDiagnosisEqualsParam) diagnosisField() {}

func (recordWithPrismaDiagnosisSetParam) settable()  {}
func (recordWithPrismaDiagnosisEqualsParam) equals() {}

type recordWithPrismaDiagnosisEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p recordWithPrismaDiagnosisEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p recordWithPrismaDiagnosisEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p recordWithPrismaDiagnosisEqualsUniqueParam) recordModel()    {}
func (p recordWithPrismaDiagnosisEqualsUniqueParam) diagnosisField() {}

func (recordWithPrismaDiagnosisEqualsUniqueParam) unique() {}
func (recordWithPrismaDiagnosisEqualsUniqueParam) equals() {}

type RecordWithPrismaTreatmentEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	recordModel()
	treatmentField()
}

type RecordWithPrismaTreatmentSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	recordModel()
	treatmentField()
}

type recordWithPrismaTreatmentSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p recordWithPrismaTreatmentSetParam) field() builder.Field {
	return p.data
}

func (p recordWithPrismaTreatmentSetParam) getQuery() builder.Query {
	return p.query
}

func (p recordWithPrismaTreatmentSetParam) recordModel() {}

func (p recordWithPrismaTreatmentSetParam) treatmentField() {}

type RecordWithPrismaTreatmentWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	recordModel()
	treatmentField()
}

type recordWithPrismaTreatmentEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p recordWithPrismaTreatmentEqualsParam) field() builder.Field {
	return p.data
}

func (p recordWithPrismaTreatmentEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p recordWithPrismaTreatmentEqualsParam) recordModel() {}

func (p recordWithPrismaTreatmentEqualsParam) treatmentField() {}

func (recordWithPrismaTreatmentSetParam) settable()  {}
func (recordWithPrismaTreatmentEqualsParam) equals() {}

type recordWithPrismaTreatmentEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p recordWithPrismaTreatmentEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p recordWithPrismaTreatmentEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p recordWithPrismaTreatmentEqualsUniqueParam) recordModel()    {}
func (p recordWithPrismaTreatmentEqualsUniqueParam) treatmentField() {}

func (recordWithPrismaTreatmentEqualsUniqueParam) unique() {}
func (recordWithPrismaTreatmentEqualsUniqueParam) equals() {}

type RecordWithPrismaReportsEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	recordModel()
	reportsField()
}

type RecordWithPrismaReportsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	recordModel()
	reportsField()
}

type recordWithPrismaReportsSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p recordWithPrismaReportsSetParam) field() builder.Field {
	return p.data
}

func (p recordWithPrismaReportsSetParam) getQuery() builder.Query {
	return p.query
}

func (p recordWithPrismaReportsSetParam) recordModel() {}

func (p recordWithPrismaReportsSetParam) reportsField() {}

type RecordWithPrismaReportsWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	recordModel()
	reportsField()
}

type recordWithPrismaReportsEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p recordWithPrismaReportsEqualsParam) field() builder.Field {
	return p.data
}

func (p recordWithPrismaReportsEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p recordWithPrismaReportsEqualsParam) recordModel() {}

func (p recordWithPrismaReportsEqualsParam) reportsField() {}

func (recordWithPrismaReportsSetParam) settable()  {}
func (recordWithPrismaReportsEqualsParam) equals() {}

type recordWithPrismaReportsEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p recordWithPrismaReportsEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p recordWithPrismaReportsEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p recordWithPrismaReportsEqualsUniqueParam) recordModel()  {}
func (p recordWithPrismaReportsEqualsUniqueParam) reportsField() {}

func (recordWithPrismaReportsEqualsUniqueParam) unique() {}
func (recordWithPrismaReportsEqualsUniqueParam) equals() {}

type RecordWithPrismaUserEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	recordModel()
	userField()
}

type RecordWithPrismaUserSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	recordModel()
	userField()
}

type recordWithPrismaUserSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p recordWithPrismaUserSetParam) field() builder.Field {
	return p.data
}

func (p recordWithPrismaUserSetParam) getQuery() builder.Query {
	return p.query
}

func (p recordWithPrismaUserSetParam) recordModel() {}

func (p recordWithPrismaUserSetParam) userField() {}

type RecordWithPrismaUserWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	recordModel()
	userField()
}

type recordWithPrismaUserEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p recordWithPrismaUserEqualsParam) field() builder.Field {
	return p.data
}

func (p recordWithPrismaUserEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p recordWithPrismaUserEqualsParam) recordModel() {}

func (p recordWithPrismaUserEqualsParam) userField() {}

func (recordWithPrismaUserSetParam) settable()  {}
func (recordWithPrismaUserEqualsParam) equals() {}

type recordWithPrismaUserEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p recordWithPrismaUserEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p recordWithPrismaUserEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p recordWithPrismaUserEqualsUniqueParam) recordModel() {}
func (p recordWithPrismaUserEqualsUniqueParam) userField()   {}

func (recordWithPrismaUserEqualsUniqueParam) unique() {}
func (recordWithPrismaUserEqualsUniqueParam) equals() {}

type RecordWithPrismaUserIDEqualsSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	equals()
	recordModel()
	userIDField()
}

type RecordWithPrismaUserIDSetParam interface {
	field() builder.Field
	getQuery() builder.Query
	recordModel()
	userIDField()
}

type recordWithPrismaUserIDSetParam struct {
	data  builder.Field
	query builder.Query
}

func (p recordWithPrismaUserIDSetParam) field() builder.Field {
	return p.data
}

func (p recordWithPrismaUserIDSetParam) getQuery() builder.Query {
	return p.query
}

func (p recordWithPrismaUserIDSetParam) recordModel() {}

func (p recordWithPrismaUserIDSetParam) userIDField() {}

type RecordWithPrismaUserIDWhereParam interface {
	field() builder.Field
	getQuery() builder.Query
	recordModel()
	userIDField()
}

type recordWithPrismaUserIDEqualsParam struct {
	data  builder.Field
	query builder.Query
}

func (p recordWithPrismaUserIDEqualsParam) field() builder.Field {
	return p.data
}

func (p recordWithPrismaUserIDEqualsParam) getQuery() builder.Query {
	return p.query
}

func (p recordWithPrismaUserIDEqualsParam) recordModel() {}

func (p recordWithPrismaUserIDEqualsParam) userIDField() {}

func (recordWithPrismaUserIDSetParam) settable()  {}
func (recordWithPrismaUserIDEqualsParam) equals() {}

type recordWithPrismaUserIDEqualsUniqueParam struct {
	data  builder.Field
	query builder.Query
}

func (p recordWithPrismaUserIDEqualsUniqueParam) field() builder.Field {
	return p.data
}

func (p recordWithPrismaUserIDEqualsUniqueParam) getQuery() builder.Query {
	return p.query
}

func (p recordWithPrismaUserIDEqualsUniqueParam) recordModel() {}
func (p recordWithPrismaUserIDEqualsUniqueParam) userIDField() {}

func (recordWithPrismaUserIDEqualsUniqueParam) unique() {}
func (recordWithPrismaUserIDEqualsUniqueParam) equals() {}

// --- template create.gotpl ---

// Creates a single user.
func (r userActions) CreateOne(
	_name UserWithPrismaNameSetParam,
	_username UserWithPrismaUsernameSetParam,
	_address UserWithPrismaAddressSetParam,
	_image UserWithPrismaImageSetParam,
	_authID UserWithPrismaAuthIDSetParam,

	optional ...UserSetParam,
) userCreateOne {
	var v userCreateOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "createOne"
	v.query.Model = "User"
	v.query.Outputs = userOutput

	var fields []builder.Field

	fields = append(fields, _name.field())
	fields = append(fields, _username.field())
	fields = append(fields, _address.field())
	fields = append(fields, _image.field())
	fields = append(fields, _authID.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

func (r userCreateOne) With(params ...UserRelationWith) userCreateOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

type userCreateOne struct {
	query builder.Query
}

func (p userCreateOne) ExtractQuery() builder.Query {
	return p.query
}

func (p userCreateOne) userModel() {}

func (r userCreateOne) Exec(ctx context.Context) (*UserModel, error) {
	var v UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userCreateOne) Tx() UserUniqueTxResult {
	v := newUserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

// Creates a single record.
func (r recordActions) CreateOne(
	_title RecordWithPrismaTitleSetParam,
	_date RecordWithPrismaDateSetParam,
	_user RecordWithPrismaUserSetParam,

	optional ...RecordSetParam,
) recordCreateOne {
	var v recordCreateOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "createOne"
	v.query.Model = "Record"
	v.query.Outputs = recordOutput

	var fields []builder.Field

	fields = append(fields, _title.field())
	fields = append(fields, _date.field())
	fields = append(fields, _user.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

func (r recordCreateOne) With(params ...RecordRelationWith) recordCreateOne {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

type recordCreateOne struct {
	query builder.Query
}

func (p recordCreateOne) ExtractQuery() builder.Query {
	return p.query
}

func (p recordCreateOne) recordModel() {}

func (r recordCreateOne) Exec(ctx context.Context) (*RecordModel, error) {
	var v RecordModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r recordCreateOne) Tx() RecordUniqueTxResult {
	v := newRecordUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

// --- template find.gotpl ---

type userToRecordsFindUnique struct {
	query builder.Query
}

func (r userToRecordsFindUnique) getQuery() builder.Query {
	return r.query
}

func (r userToRecordsFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r userToRecordsFindUnique) with()         {}
func (r userToRecordsFindUnique) userModel()    {}
func (r userToRecordsFindUnique) userRelation() {}

func (r userToRecordsFindUnique) With(params ...RecordRelationWith) userToRecordsFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userToRecordsFindUnique) Exec(ctx context.Context) (
	*UserModel,
	error,
) {
	var v *UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userToRecordsFindUnique) ExecInner(ctx context.Context) (
	*InnerUser,
	error,
) {
	var v *InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userToRecordsFindUnique) Update(params ...UserSetParam) userToRecordsUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "User"

	var v userToRecordsUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userToRecordsUpdateUnique struct {
	query builder.Query
}

func (r userToRecordsUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r userToRecordsUpdateUnique) userModel() {}

func (r userToRecordsUpdateUnique) Exec(ctx context.Context) (*UserModel, error) {
	var v UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToRecordsUpdateUnique) Tx() UserUniqueTxResult {
	v := newUserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r userToRecordsFindUnique) Delete() userToRecordsDeleteUnique {
	var v userToRecordsDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "User"

	return v
}

type userToRecordsDeleteUnique struct {
	query builder.Query
}

func (r userToRecordsDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p userToRecordsDeleteUnique) userModel() {}

func (r userToRecordsDeleteUnique) Exec(ctx context.Context) (*UserModel, error) {
	var v UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToRecordsDeleteUnique) Tx() UserUniqueTxResult {
	v := newUserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type userToRecordsFindFirst struct {
	query builder.Query
}

func (r userToRecordsFindFirst) getQuery() builder.Query {
	return r.query
}

func (r userToRecordsFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r userToRecordsFindFirst) with()         {}
func (r userToRecordsFindFirst) userModel()    {}
func (r userToRecordsFindFirst) userRelation() {}

func (r userToRecordsFindFirst) With(params ...RecordRelationWith) userToRecordsFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userToRecordsFindFirst) OrderBy(params ...RecordOrderByParam) userToRecordsFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r userToRecordsFindFirst) Skip(count int) userToRecordsFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r userToRecordsFindFirst) Take(count int) userToRecordsFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r userToRecordsFindFirst) Cursor(cursor UserCursorParam) userToRecordsFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r userToRecordsFindFirst) Exec(ctx context.Context) (
	*UserModel,
	error,
) {
	var v *UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userToRecordsFindFirst) ExecInner(ctx context.Context) (
	*InnerUser,
	error,
) {
	var v *InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type userToRecordsFindMany struct {
	query builder.Query
}

func (r userToRecordsFindMany) getQuery() builder.Query {
	return r.query
}

func (r userToRecordsFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r userToRecordsFindMany) with()         {}
func (r userToRecordsFindMany) userModel()    {}
func (r userToRecordsFindMany) userRelation() {}

func (r userToRecordsFindMany) With(params ...RecordRelationWith) userToRecordsFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userToRecordsFindMany) OrderBy(params ...RecordOrderByParam) userToRecordsFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r userToRecordsFindMany) Skip(count int) userToRecordsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r userToRecordsFindMany) Take(count int) userToRecordsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r userToRecordsFindMany) Cursor(cursor UserCursorParam) userToRecordsFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r userToRecordsFindMany) Exec(ctx context.Context) (
	[]UserModel,
	error,
) {
	var v []UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r userToRecordsFindMany) ExecInner(ctx context.Context) (
	[]InnerUser,
	error,
) {
	var v []InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r userToRecordsFindMany) Update(params ...UserSetParam) userToRecordsUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "User"

	r.query.Outputs = countOutput

	var v userToRecordsUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userToRecordsUpdateMany struct {
	query builder.Query
}

func (r userToRecordsUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r userToRecordsUpdateMany) userModel() {}

func (r userToRecordsUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToRecordsUpdateMany) Tx() UserManyTxResult {
	v := newUserManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r userToRecordsFindMany) Delete() userToRecordsDeleteMany {
	var v userToRecordsDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "User"

	v.query.Outputs = countOutput

	return v
}

type userToRecordsDeleteMany struct {
	query builder.Query
}

func (r userToRecordsDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p userToRecordsDeleteMany) userModel() {}

func (r userToRecordsDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userToRecordsDeleteMany) Tx() UserManyTxResult {
	v := newUserManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type userFindUnique struct {
	query builder.Query
}

func (r userFindUnique) getQuery() builder.Query {
	return r.query
}

func (r userFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r userFindUnique) with()         {}
func (r userFindUnique) userModel()    {}
func (r userFindUnique) userRelation() {}

func (r userActions) FindUnique(
	params UserEqualsUniqueWhereParam,
) userFindUnique {
	var v userFindUnique
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findUnique"

	v.query.Model = "User"
	v.query.Outputs = userOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r userFindUnique) With(params ...UserRelationWith) userFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userFindUnique) Exec(ctx context.Context) (
	*UserModel,
	error,
) {
	var v *UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userFindUnique) ExecInner(ctx context.Context) (
	*InnerUser,
	error,
) {
	var v *InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userFindUnique) Update(params ...UserSetParam) userUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "User"

	var v userUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userUpdateUnique struct {
	query builder.Query
}

func (r userUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r userUpdateUnique) userModel() {}

func (r userUpdateUnique) Exec(ctx context.Context) (*UserModel, error) {
	var v UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userUpdateUnique) Tx() UserUniqueTxResult {
	v := newUserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r userFindUnique) Delete() userDeleteUnique {
	var v userDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "User"

	return v
}

type userDeleteUnique struct {
	query builder.Query
}

func (r userDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p userDeleteUnique) userModel() {}

func (r userDeleteUnique) Exec(ctx context.Context) (*UserModel, error) {
	var v UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userDeleteUnique) Tx() UserUniqueTxResult {
	v := newUserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type userFindFirst struct {
	query builder.Query
}

func (r userFindFirst) getQuery() builder.Query {
	return r.query
}

func (r userFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r userFindFirst) with()         {}
func (r userFindFirst) userModel()    {}
func (r userFindFirst) userRelation() {}

func (r userActions) FindFirst(
	params ...UserWhereParam,
) userFindFirst {
	var v userFindFirst
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findFirst"

	v.query.Model = "User"
	v.query.Outputs = userOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r userFindFirst) With(params ...UserRelationWith) userFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userFindFirst) OrderBy(params ...UserOrderByParam) userFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r userFindFirst) Skip(count int) userFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r userFindFirst) Take(count int) userFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r userFindFirst) Cursor(cursor UserCursorParam) userFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r userFindFirst) Exec(ctx context.Context) (
	*UserModel,
	error,
) {
	var v *UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r userFindFirst) ExecInner(ctx context.Context) (
	*InnerUser,
	error,
) {
	var v *InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type userFindMany struct {
	query builder.Query
}

func (r userFindMany) getQuery() builder.Query {
	return r.query
}

func (r userFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r userFindMany) with()         {}
func (r userFindMany) userModel()    {}
func (r userFindMany) userRelation() {}

func (r userActions) FindMany(
	params ...UserWhereParam,
) userFindMany {
	var v userFindMany
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findMany"

	v.query.Model = "User"
	v.query.Outputs = userOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r userFindMany) With(params ...UserRelationWith) userFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r userFindMany) OrderBy(params ...UserOrderByParam) userFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r userFindMany) Skip(count int) userFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r userFindMany) Take(count int) userFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r userFindMany) Cursor(cursor UserCursorParam) userFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r userFindMany) Exec(ctx context.Context) (
	[]UserModel,
	error,
) {
	var v []UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r userFindMany) ExecInner(ctx context.Context) (
	[]InnerUser,
	error,
) {
	var v []InnerUser
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r userFindMany) Update(params ...UserSetParam) userUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "User"

	r.query.Outputs = countOutput

	var v userUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type userUpdateMany struct {
	query builder.Query
}

func (r userUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r userUpdateMany) userModel() {}

func (r userUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userUpdateMany) Tx() UserManyTxResult {
	v := newUserManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r userFindMany) Delete() userDeleteMany {
	var v userDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "User"

	v.query.Outputs = countOutput

	return v
}

type userDeleteMany struct {
	query builder.Query
}

func (r userDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p userDeleteMany) userModel() {}

func (r userDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userDeleteMany) Tx() UserManyTxResult {
	v := newUserManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type recordToUserFindUnique struct {
	query builder.Query
}

func (r recordToUserFindUnique) getQuery() builder.Query {
	return r.query
}

func (r recordToUserFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r recordToUserFindUnique) with()           {}
func (r recordToUserFindUnique) recordModel()    {}
func (r recordToUserFindUnique) recordRelation() {}

func (r recordToUserFindUnique) With(params ...UserRelationWith) recordToUserFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r recordToUserFindUnique) Exec(ctx context.Context) (
	*RecordModel,
	error,
) {
	var v *RecordModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r recordToUserFindUnique) ExecInner(ctx context.Context) (
	*InnerRecord,
	error,
) {
	var v *InnerRecord
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r recordToUserFindUnique) Update(params ...RecordSetParam) recordToUserUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Record"

	var v recordToUserUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type recordToUserUpdateUnique struct {
	query builder.Query
}

func (r recordToUserUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r recordToUserUpdateUnique) recordModel() {}

func (r recordToUserUpdateUnique) Exec(ctx context.Context) (*RecordModel, error) {
	var v RecordModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r recordToUserUpdateUnique) Tx() RecordUniqueTxResult {
	v := newRecordUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r recordToUserFindUnique) Delete() recordToUserDeleteUnique {
	var v recordToUserDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Record"

	return v
}

type recordToUserDeleteUnique struct {
	query builder.Query
}

func (r recordToUserDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p recordToUserDeleteUnique) recordModel() {}

func (r recordToUserDeleteUnique) Exec(ctx context.Context) (*RecordModel, error) {
	var v RecordModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r recordToUserDeleteUnique) Tx() RecordUniqueTxResult {
	v := newRecordUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type recordToUserFindFirst struct {
	query builder.Query
}

func (r recordToUserFindFirst) getQuery() builder.Query {
	return r.query
}

func (r recordToUserFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r recordToUserFindFirst) with()           {}
func (r recordToUserFindFirst) recordModel()    {}
func (r recordToUserFindFirst) recordRelation() {}

func (r recordToUserFindFirst) With(params ...UserRelationWith) recordToUserFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r recordToUserFindFirst) OrderBy(params ...UserOrderByParam) recordToUserFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r recordToUserFindFirst) Skip(count int) recordToUserFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r recordToUserFindFirst) Take(count int) recordToUserFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r recordToUserFindFirst) Cursor(cursor RecordCursorParam) recordToUserFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r recordToUserFindFirst) Exec(ctx context.Context) (
	*RecordModel,
	error,
) {
	var v *RecordModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r recordToUserFindFirst) ExecInner(ctx context.Context) (
	*InnerRecord,
	error,
) {
	var v *InnerRecord
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type recordToUserFindMany struct {
	query builder.Query
}

func (r recordToUserFindMany) getQuery() builder.Query {
	return r.query
}

func (r recordToUserFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r recordToUserFindMany) with()           {}
func (r recordToUserFindMany) recordModel()    {}
func (r recordToUserFindMany) recordRelation() {}

func (r recordToUserFindMany) With(params ...UserRelationWith) recordToUserFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r recordToUserFindMany) OrderBy(params ...UserOrderByParam) recordToUserFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r recordToUserFindMany) Skip(count int) recordToUserFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r recordToUserFindMany) Take(count int) recordToUserFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r recordToUserFindMany) Cursor(cursor RecordCursorParam) recordToUserFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r recordToUserFindMany) Exec(ctx context.Context) (
	[]RecordModel,
	error,
) {
	var v []RecordModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r recordToUserFindMany) ExecInner(ctx context.Context) (
	[]InnerRecord,
	error,
) {
	var v []InnerRecord
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r recordToUserFindMany) Update(params ...RecordSetParam) recordToUserUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Record"

	r.query.Outputs = countOutput

	var v recordToUserUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type recordToUserUpdateMany struct {
	query builder.Query
}

func (r recordToUserUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r recordToUserUpdateMany) recordModel() {}

func (r recordToUserUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r recordToUserUpdateMany) Tx() RecordManyTxResult {
	v := newRecordManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r recordToUserFindMany) Delete() recordToUserDeleteMany {
	var v recordToUserDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Record"

	v.query.Outputs = countOutput

	return v
}

type recordToUserDeleteMany struct {
	query builder.Query
}

func (r recordToUserDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p recordToUserDeleteMany) recordModel() {}

func (r recordToUserDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r recordToUserDeleteMany) Tx() RecordManyTxResult {
	v := newRecordManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type recordFindUnique struct {
	query builder.Query
}

func (r recordFindUnique) getQuery() builder.Query {
	return r.query
}

func (r recordFindUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r recordFindUnique) with()           {}
func (r recordFindUnique) recordModel()    {}
func (r recordFindUnique) recordRelation() {}

func (r recordActions) FindUnique(
	params RecordEqualsUniqueWhereParam,
) recordFindUnique {
	var v recordFindUnique
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findUnique"

	v.query.Model = "Record"
	v.query.Outputs = recordOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r recordFindUnique) With(params ...RecordRelationWith) recordFindUnique {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r recordFindUnique) Exec(ctx context.Context) (
	*RecordModel,
	error,
) {
	var v *RecordModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r recordFindUnique) ExecInner(ctx context.Context) (
	*InnerRecord,
	error,
) {
	var v *InnerRecord
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r recordFindUnique) Update(params ...RecordSetParam) recordUpdateUnique {
	r.query.Operation = "mutation"
	r.query.Method = "updateOne"
	r.query.Model = "Record"

	var v recordUpdateUnique
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type recordUpdateUnique struct {
	query builder.Query
}

func (r recordUpdateUnique) ExtractQuery() builder.Query {
	return r.query
}

func (r recordUpdateUnique) recordModel() {}

func (r recordUpdateUnique) Exec(ctx context.Context) (*RecordModel, error) {
	var v RecordModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r recordUpdateUnique) Tx() RecordUniqueTxResult {
	v := newRecordUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r recordFindUnique) Delete() recordDeleteUnique {
	var v recordDeleteUnique
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteOne"
	v.query.Model = "Record"

	return v
}

type recordDeleteUnique struct {
	query builder.Query
}

func (r recordDeleteUnique) ExtractQuery() builder.Query {
	return r.query
}

func (p recordDeleteUnique) recordModel() {}

func (r recordDeleteUnique) Exec(ctx context.Context) (*RecordModel, error) {
	var v RecordModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r recordDeleteUnique) Tx() RecordUniqueTxResult {
	v := newRecordUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type recordFindFirst struct {
	query builder.Query
}

func (r recordFindFirst) getQuery() builder.Query {
	return r.query
}

func (r recordFindFirst) ExtractQuery() builder.Query {
	return r.query
}

func (r recordFindFirst) with()           {}
func (r recordFindFirst) recordModel()    {}
func (r recordFindFirst) recordRelation() {}

func (r recordActions) FindFirst(
	params ...RecordWhereParam,
) recordFindFirst {
	var v recordFindFirst
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findFirst"

	v.query.Model = "Record"
	v.query.Outputs = recordOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r recordFindFirst) With(params ...RecordRelationWith) recordFindFirst {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r recordFindFirst) OrderBy(params ...RecordOrderByParam) recordFindFirst {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r recordFindFirst) Skip(count int) recordFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r recordFindFirst) Take(count int) recordFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r recordFindFirst) Cursor(cursor RecordCursorParam) recordFindFirst {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r recordFindFirst) Exec(ctx context.Context) (
	*RecordModel,
	error,
) {
	var v *RecordModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

func (r recordFindFirst) ExecInner(ctx context.Context) (
	*InnerRecord,
	error,
) {
	var v *InnerRecord
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	if v == nil {
		return nil, ErrNotFound
	}

	return v, nil
}

type recordFindMany struct {
	query builder.Query
}

func (r recordFindMany) getQuery() builder.Query {
	return r.query
}

func (r recordFindMany) ExtractQuery() builder.Query {
	return r.query
}

func (r recordFindMany) with()           {}
func (r recordFindMany) recordModel()    {}
func (r recordFindMany) recordRelation() {}

func (r recordActions) FindMany(
	params ...RecordWhereParam,
) recordFindMany {
	var v recordFindMany
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "query"

	v.query.Method = "findMany"

	v.query.Model = "Record"
	v.query.Outputs = recordOutput

	var where []builder.Field
	for _, q := range params {
		if query := q.getQuery(); query.Operation != "" {
			v.query.Outputs = append(v.query.Outputs, builder.Output{
				Name:    query.Method,
				Inputs:  query.Inputs,
				Outputs: query.Outputs,
			})
		} else {
			where = append(where, q.field())
		}
	}

	if len(where) > 0 {
		v.query.Inputs = append(v.query.Inputs, builder.Input{
			Name:   "where",
			Fields: where,
		})
	}

	return v
}

func (r recordFindMany) With(params ...RecordRelationWith) recordFindMany {
	for _, q := range params {
		query := q.getQuery()
		r.query.Outputs = append(r.query.Outputs, builder.Output{
			Name:    query.Method,
			Inputs:  query.Inputs,
			Outputs: query.Outputs,
		})
	}

	return r
}

func (r recordFindMany) OrderBy(params ...RecordOrderByParam) recordFindMany {
	var fields []builder.Field

	for _, param := range params {
		fields = append(fields, builder.Field{
			Name:   param.field().Name,
			Value:  param.field().Value,
			Fields: param.field().Fields,
		})
	}

	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:     "orderBy",
		Fields:   fields,
		WrapList: true,
	})

	return r
}

func (r recordFindMany) Skip(count int) recordFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "skip",
		Value: count,
	})
	return r
}

func (r recordFindMany) Take(count int) recordFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:  "take",
		Value: count,
	})
	return r
}

func (r recordFindMany) Cursor(cursor RecordCursorParam) recordFindMany {
	r.query.Inputs = append(r.query.Inputs, builder.Input{
		Name:   "cursor",
		Fields: []builder.Field{cursor.field()},
	})
	return r
}

func (r recordFindMany) Exec(ctx context.Context) (
	[]RecordModel,
	error,
) {
	var v []RecordModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r recordFindMany) ExecInner(ctx context.Context) (
	[]InnerRecord,
	error,
) {
	var v []InnerRecord
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}

	return v, nil
}

func (r recordFindMany) Update(params ...RecordSetParam) recordUpdateMany {
	r.query.Operation = "mutation"
	r.query.Method = "updateMany"
	r.query.Model = "Record"

	r.query.Outputs = countOutput

	var v recordUpdateMany
	v.query = r.query
	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}
	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "data",
		Fields: fields,
	})
	return v
}

type recordUpdateMany struct {
	query builder.Query
}

func (r recordUpdateMany) ExtractQuery() builder.Query {
	return r.query
}

func (r recordUpdateMany) recordModel() {}

func (r recordUpdateMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r recordUpdateMany) Tx() RecordManyTxResult {
	v := newRecordManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

func (r recordFindMany) Delete() recordDeleteMany {
	var v recordDeleteMany
	v.query = r.query
	v.query.Operation = "mutation"
	v.query.Method = "deleteMany"
	v.query.Model = "Record"

	v.query.Outputs = countOutput

	return v
}

type recordDeleteMany struct {
	query builder.Query
}

func (r recordDeleteMany) ExtractQuery() builder.Query {
	return r.query
}

func (p recordDeleteMany) recordModel() {}

func (r recordDeleteMany) Exec(ctx context.Context) (*BatchResult, error) {
	var v BatchResult
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r recordDeleteMany) Tx() RecordManyTxResult {
	v := newRecordManyTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

// --- template transaction.gotpl ---

func newUserUniqueTxResult() UserUniqueTxResult {
	return UserUniqueTxResult{
		result: &transaction.Result{},
	}
}

type UserUniqueTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p UserUniqueTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p UserUniqueTxResult) IsTx() {}

func (r UserUniqueTxResult) Result() (v *UserModel) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func newUserManyTxResult() UserManyTxResult {
	return UserManyTxResult{
		result: &transaction.Result{},
	}
}

type UserManyTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p UserManyTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p UserManyTxResult) IsTx() {}

func (r UserManyTxResult) Result() (v *BatchResult) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func newRecordUniqueTxResult() RecordUniqueTxResult {
	return RecordUniqueTxResult{
		result: &transaction.Result{},
	}
}

type RecordUniqueTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p RecordUniqueTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p RecordUniqueTxResult) IsTx() {}

func (r RecordUniqueTxResult) Result() (v *RecordModel) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

func newRecordManyTxResult() RecordManyTxResult {
	return RecordManyTxResult{
		result: &transaction.Result{},
	}
}

type RecordManyTxResult struct {
	query  builder.Query
	result *transaction.Result
}

func (p RecordManyTxResult) ExtractQuery() builder.Query {
	return p.query
}

func (p RecordManyTxResult) IsTx() {}

func (r RecordManyTxResult) Result() (v *BatchResult) {
	if err := r.result.Get(r.query.TxResult, &v); err != nil {
		panic(err)
	}
	return v
}

// --- template upsert.gotpl ---

type userUpsertOne struct {
	query builder.Query
}

func (r userUpsertOne) getQuery() builder.Query {
	return r.query
}

func (r userUpsertOne) ExtractQuery() builder.Query {
	return r.query
}

func (r userUpsertOne) with()         {}
func (r userUpsertOne) userModel()    {}
func (r userUpsertOne) userRelation() {}

func (r userActions) UpsertOne(
	params UserEqualsUniqueWhereParam,
) userUpsertOne {
	var v userUpsertOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "upsertOne"
	v.query.Model = "User"
	v.query.Outputs = userOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r userUpsertOne) Create(

	_name UserWithPrismaNameSetParam,
	_username UserWithPrismaUsernameSetParam,
	_address UserWithPrismaAddressSetParam,
	_image UserWithPrismaImageSetParam,
	_authID UserWithPrismaAuthIDSetParam,

	optional ...UserSetParam,
) userUpsertOne {
	var v userUpsertOne
	v.query = r.query

	var fields []builder.Field
	fields = append(fields, _name.field())
	fields = append(fields, _username.field())
	fields = append(fields, _address.field())
	fields = append(fields, _image.field())
	fields = append(fields, _authID.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "create",
		Fields: fields,
	})

	return v
}

func (r userUpsertOne) Update(
	params ...UserSetParam,
) userUpsertOne {
	var v userUpsertOne
	v.query = r.query

	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "update",
		Fields: fields,
	})

	return v
}

func (r userUpsertOne) Exec(ctx context.Context) (*UserModel, error) {
	var v UserModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r userUpsertOne) Tx() UserUniqueTxResult {
	v := newUserUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}

type recordUpsertOne struct {
	query builder.Query
}

func (r recordUpsertOne) getQuery() builder.Query {
	return r.query
}

func (r recordUpsertOne) ExtractQuery() builder.Query {
	return r.query
}

func (r recordUpsertOne) with()           {}
func (r recordUpsertOne) recordModel()    {}
func (r recordUpsertOne) recordRelation() {}

func (r recordActions) UpsertOne(
	params RecordEqualsUniqueWhereParam,
) recordUpsertOne {
	var v recordUpsertOne
	v.query = builder.NewQuery()
	v.query.Engine = r.client

	v.query.Operation = "mutation"
	v.query.Method = "upsertOne"
	v.query.Model = "Record"
	v.query.Outputs = recordOutput

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "where",
		Fields: builder.TransformEquals([]builder.Field{params.field()}),
	})

	return v
}

func (r recordUpsertOne) Create(

	_title RecordWithPrismaTitleSetParam,
	_date RecordWithPrismaDateSetParam,
	_user RecordWithPrismaUserSetParam,

	optional ...RecordSetParam,
) recordUpsertOne {
	var v recordUpsertOne
	v.query = r.query

	var fields []builder.Field
	fields = append(fields, _title.field())
	fields = append(fields, _date.field())
	fields = append(fields, _user.field())

	for _, q := range optional {
		fields = append(fields, q.field())
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "create",
		Fields: fields,
	})

	return v
}

func (r recordUpsertOne) Update(
	params ...RecordSetParam,
) recordUpsertOne {
	var v recordUpsertOne
	v.query = r.query

	var fields []builder.Field
	for _, q := range params {

		field := q.field()

		_, isJson := field.Value.(types.JSON)
		if field.Value != nil && !isJson {
			v := field.Value
			field.Fields = []builder.Field{
				{
					Name:  "set",
					Value: v,
				},
			}

			field.Value = nil
		}

		fields = append(fields, field)
	}

	v.query.Inputs = append(v.query.Inputs, builder.Input{
		Name:   "update",
		Fields: fields,
	})

	return v
}

func (r recordUpsertOne) Exec(ctx context.Context) (*RecordModel, error) {
	var v RecordModel
	if err := r.query.Exec(ctx, &v); err != nil {
		return nil, err
	}
	return &v, nil
}

func (r recordUpsertOne) Tx() RecordUniqueTxResult {
	v := newRecordUniqueTxResult()
	v.query = r.query
	v.query.TxResult = make(chan []byte, 1)
	return v
}
